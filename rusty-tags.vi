!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
A	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^impl<A: Copy> FromColor<A> for A {$/;"	c
ACCLASS	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/encoder.rs	/^static ACCLASS: u8 = 1;$/;"	v
AC_QUANT	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^static AC_QUANT: [i16; 128] = [$/;"	v
APP0	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/encoder.rs	/^static APP0: u8 = 0xE0;$/;"	v
Absolute	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^    Absolute(u8, Vec<u8>),$/;"	e	enum:RLEInsn
AnimationDecoder	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^pub trait AnimationDecoder<'a> {$/;"	i
Arbitrary	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/header.rs	/^    Arbitrary(ArbitraryHeader),$/;"	e	enum:HeaderRecord
ArbitraryHeader	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/decoder.rs	/^impl DecodableImageHeader for ArbitraryHeader {$/;"	c
ArbitraryHeader	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/header.rs	/^pub struct ArbitraryHeader {$/;"	s
ArbitraryMap	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/header.rs	/^    ArbitraryMap,$/;"	e	enum:PNMSubtype
ArbitraryTuplType	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/header.rs	/^pub enum ArbitraryTuplType {$/;"	g
Ascii	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/encoder.rs	/^    Ascii {$/;"	e	enum:TupleEncoding
Ascii	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/header.rs	/^    Ascii,$/;"	e	enum:SampleEncoding
AutoBreak	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/autobreak.rs	/^impl<W: io::Write> AutoBreak<W> {$/;"	c
AutoBreak	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/autobreak.rs	/^impl<W: io::Write> Drop for AutoBreak<W> {$/;"	c
AutoBreak	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/autobreak.rs	/^impl<W: io::Write> io::Write for AutoBreak<W> {$/;"	c
AutoBreak	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/autobreak.rs	/^pub struct AutoBreak<W: io::Write> {$/;"	s
BGR	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^    BGR(u8),$/;"	e	enum:ColorType
BGRA	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^    BGRA(u8),$/;"	e	enum:ColorType
BMP	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/ico/decoder.rs	/^    BMP(BMPDecoder<R>),$/;"	e	enum:InnerDecoder
BMP	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    BMP,$/;"	e	enum:ImageFormat
BMP	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    BMP,$/;"	e	enum:ImageOutputFormat
BMPDecoder	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^impl<R: Read + Seek> BMPDecoder<R> {$/;"	c
BMPDecoder	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^impl<R: Read + Seek> ImageDecoder for BMPDecoder<R> {$/;"	c
BMPDecoder	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^impl<R: Read + Seek> ImageDecoderExt for BMPDecoder<R> {$/;"	c
BMPDecoder	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^pub struct BMPDecoder<R> {$/;"	s
BMPEncoder	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/encoder.rs	/^impl<'a, W: Write + 'a> BMPEncoder<'a, W> {$/;"	c
BMPEncoder	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/encoder.rs	/^pub struct BMPEncoder<'a, W: 'a> {$/;"	s
BMPHeaderType	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^enum BMPHeaderType {$/;"	g
BWBit	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/decoder.rs	/^    BWBit,$/;"	e	enum:TupleType
BWBit	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/decoder.rs	/^impl Sample for BWBit {$/;"	c
BWBit	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/decoder.rs	/^struct BWBit;$/;"	s
Bgr	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^impl<T: Primitive + 'static> FromColor<Bgra<T>> for Bgr<T> {$/;"	c
Bgr	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^impl<T: Primitive + 'static> FromColor<Luma<T>> for Bgr<T> {$/;"	c
Bgr	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^impl<T: Primitive + 'static> FromColor<LumaA<T>> for Bgr<T> {$/;"	c
Bgr	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^impl<T: Primitive + 'static> FromColor<Rgb<T>> for Bgr<T> {$/;"	c
Bgr	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^impl<T: Primitive + 'static> FromColor<Rgba<T>> for Bgr<T> {$/;"	c
Bgr	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^impl<T: Primitive> Blend for Bgr<T> {$/;"	c
Bgr	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^impl<T: Primitive> Invert for Bgr<T> {$/;"	c
BgrImage	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^pub type BgrImage = ImageBuffer<Bgr<u8>, Vec<u8>>;$/;"	t
Bgra	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^impl<T: Primitive + 'static> FromColor<Bgr<T>> for Bgra<T> {$/;"	c
Bgra	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^impl<T: Primitive + 'static> FromColor<Luma<T>> for Bgra<T> {$/;"	c
Bgra	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^impl<T: Primitive + 'static> FromColor<LumaA<T>> for Bgra<T> {$/;"	c
Bgra	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^impl<T: Primitive + 'static> FromColor<Rgb<T>> for Bgra<T> {$/;"	c
Bgra	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^impl<T: Primitive + 'static> FromColor<Rgba<T>> for Bgra<T> {$/;"	c
Bgra	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^impl<T: Primitive> Blend for Bgra<T> {$/;"	c
Bgra	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^impl<T: Primitive> Invert for Bgra<T> {$/;"	c
BgraImage	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^pub type BgraImage = ImageBuffer<Bgra<u8>, Vec<u8>>;$/;"	t
BiLevel	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/imageops/colorops.rs	/^impl ColorMap for BiLevel {$/;"	c
BiLevel	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/imageops/colorops.rs	/^pub struct BiLevel;$/;"	s
Binary	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/header.rs	/^    Binary,$/;"	e	enum:SampleEncoding
BitDepth	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/png.rs	/^impl From<ColorType> for (png::ColorType, png::BitDepth) {$/;"	c
BitWriter	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/encoder.rs	/^impl<'a, W: Write + 'a> BitWriter<'a, W> {$/;"	c
BitWriter	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/encoder.rs	/^pub struct BitWriter<'a, W: 'a> {$/;"	s
Bitfield	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^impl Bitfield {$/;"	c
Bitfield	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^struct Bitfield {$/;"	s
Bitfields	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^impl Bitfields {$/;"	c
Bitfields	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^struct Bitfields {$/;"	s
Bitfields16	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^    Bitfields16,$/;"	e	enum:ImageType
Bitfields32	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^    Bitfields32,$/;"	e	enum:ImageType
Bitmap	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/header.rs	/^    Bitmap(BitmapHeader),$/;"	e	enum:HeaderRecord
Bitmap	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/header.rs	/^    Bitmap(SampleEncoding),$/;"	e	enum:PNMSubtype
BitmapHeader	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/decoder.rs	/^impl DecodableImageHeader for BitmapHeader {$/;"	c
BitmapHeader	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/header.rs	/^pub struct BitmapHeader {$/;"	s
BlackAndWhite	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/header.rs	/^    BlackAndWhite,$/;"	e	enum:ArbitraryTuplType
BlackAndWhiteAlpha	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/header.rs	/^    BlackAndWhiteAlpha,$/;"	e	enum:ArbitraryTuplType
Blend	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^pub trait Blend {$/;"	i
BoolReader	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^impl BoolReader {$/;"	c
BoolReader	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^struct BoolReader {$/;"	s
Bounds3	/home/go/Documents/Rust/renderer/src/geometry/bounds.rs	/^impl Bounds3<f64> {$/;"	c
Bounds3	/home/go/Documents/Rust/renderer/src/geometry/bounds.rs	/^impl Default for Bounds3<f64> {$/;"	c
Bounds3	/home/go/Documents/Rust/renderer/src/geometry/bounds.rs	/^impl<'a, 'b, T: Copy> New<(&'a Point3<T>, &'b Point3<T>)> for Bounds3<T> {$/;"	c
Bounds3	/home/go/Documents/Rust/renderer/src/geometry/bounds.rs	/^impl<'a, T: Copy> New<&'a Point3<T>> for Bounds3<T> {$/;"	c
Bounds3	/home/go/Documents/Rust/renderer/src/geometry/bounds.rs	/^impl<T> Bounds3<T>$/;"	c
Bounds3	/home/go/Documents/Rust/renderer/src/geometry/bounds.rs	/^impl<T> Index<u32> for Bounds3<T> {$/;"	c
Bounds3	/home/go/Documents/Rust/renderer/src/geometry/bounds.rs	/^pub struct Bounds3<T> {$/;"	s
BufReader	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/decoder.rs	/^impl<R: Read> HeaderReader for BufReader<R> {}$/;"	c
Bytes	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/encoder.rs	/^    Bytes {$/;"	e	enum:TupleEncoding
CHROMABLUEID	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/encoder.rs	/^static CHROMABLUEID: u8 = 2;$/;"	v
CHROMADESTINATION	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/encoder.rs	/^static CHROMADESTINATION: u8 = 1;$/;"	v
CHROMAREDID	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/encoder.rs	/^static CHROMAREDID: u8 = 3;$/;"	v
COEFF_BANDS	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^static COEFF_BANDS: [u8; 16] = [0, 1, 2, 3, 6, 4, 5, 6, 6, 6, 6, 6, 6, 6, 6, 7];$/;"	v
COEFF_PROBS	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^static COEFF_PROBS: TokenProbTables = [$/;"	v
COEFF_UPDATE_PROBS	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^static COEFF_UPDATE_PROBS: TokenProbTables = [$/;"	v
CONST1	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/transform.rs	/^static CONST1: i32 = 20091;$/;"	v
CONST2	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/transform.rs	/^static CONST2: i32 = 35468;$/;"	v
CONST_BITS	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/transform.rs	/^static CONST_BITS: i32 = 13;$/;"	v
CatmullRom	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/imageops/sample.rs	/^    CatmullRom,$/;"	e	enum:FilterType
CheckedDimensions	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/encoder.rs	/^impl<'a> CheckedDimensions<'a> {$/;"	c
CheckedDimensions	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/encoder.rs	/^struct CheckedDimensions<'a> {$/;"	s
CheckedHeader	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/encoder.rs	/^impl<'a> CheckedHeader<'a> {$/;"	c
CheckedHeader	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/encoder.rs	/^struct CheckedHeader<'a> {$/;"	s
CheckedHeaderColor	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/encoder.rs	/^impl<'a> CheckedHeaderColor<'a> {$/;"	c
CheckedHeaderColor	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/encoder.rs	/^struct CheckedHeaderColor<'a> {$/;"	s
CheckedImageBuffer	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/encoder.rs	/^impl<'a> CheckedImageBuffer<'a> {$/;"	c
CheckedImageBuffer	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/encoder.rs	/^struct CheckedImageBuffer<'a> {$/;"	s
Chosen	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/encoder.rs	/^    Chosen(PNMHeader),$/;"	e	enum:HeaderStrategy
Chunker	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^enum Chunker<'a> {$/;"	g
Color	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/imageops/colorops.rs	/^    type Color = Luma<u8>;$/;"	t	implementation:BiLevel
Color	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/imageops/colorops.rs	/^    type Color = Rgba<u8>;$/;"	t	implementation:NeuQuant
Color	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/imageops/colorops.rs	/^    type Color;$/;"	t	interface:ColorMap
Color	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/math/nq.rs	/^type Color = Quad<i32>;$/;"	t
ColorMap	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/imageops/colorops.rs	/^pub trait ColorMap {$/;"	i
ColorMap	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/tga/decoder.rs	/^impl ColorMap {$/;"	c
ColorMap	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/tga/decoder.rs	/^struct ColorMap {$/;"	s
ColorType	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^pub enum ColorType {$/;"	g
ColorType	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/decoder.rs	/^impl From<jpeg_decoder::PixelFormat> for ColorType {$/;"	c
ColorType	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/png.rs	/^impl From<(png::ColorType, png::BitDepth)> for ColorType {$/;"	c
ColorType	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/tiff.rs	/^impl From<tiff::ColorType> for ColorType {$/;"	c
ColumnMajorPacked	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    ColumnMajorPacked,$/;"	e	enum:NormalForm
Component	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/encoder.rs	/^struct Component {$/;"	s
ConvertBuffer	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^pub trait ConvertBuffer<T> {$/;"	i
Core	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^    Core,$/;"	e	enum:BMPHeaderType
Custom	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/header.rs	/^    Custom(String),$/;"	e	enum:ArbitraryTuplType
DCCLASS	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/encoder.rs	/^static DCCLASS: u8 = 0;$/;"	v
DCT_CAT_BASE	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^static DCT_CAT_BASE: [u8; 6] = [5, 7, 11, 19, 35, 67];$/;"	v
DCT_TOKEN_TREE	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^static DCT_TOKEN_TREE: [i8; 22] = [$/;"	v
DC_QUANT	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^static DC_QUANT: [i16; 128] = [$/;"	v
DHT	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/encoder.rs	/^static DHT: u8 = 0xC4;$/;"	v
DQT	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/encoder.rs	/^static DQT: u8 = 0xDB;$/;"	v
DXT1	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dxt.rs	/^    DXT1,$/;"	e	enum:DXTVariant
DXT3	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dxt.rs	/^    DXT3,$/;"	e	enum:DXTVariant
DXT5	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dxt.rs	/^    DXT5,$/;"	e	enum:DXTVariant
DXTDecoder	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dxt.rs	/^impl<R: Read + Seek> ImageDecoderExt for DXTDecoder<R> {$/;"	c
DXTDecoder	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dxt.rs	/^impl<R: Read> DXTDecoder<R> {$/;"	c
DXTDecoder	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dxt.rs	/^impl<R: Read> ImageDecoder for DXTDecoder<R> {$/;"	c
DXTDecoder	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dxt.rs	/^pub struct DXTDecoder<R: Read> {$/;"	s
DXTEncoder	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dxt.rs	/^impl<W: Write> DXTEncoder<W> {$/;"	c
DXTEncoder	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dxt.rs	/^pub struct DXTEncoder<W: Write> {$/;"	s
DXTReader	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dxt.rs	/^impl<R: Read> Read for DXTReader<R> {$/;"	c
DXTReader	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dxt.rs	/^pub struct DXTReader<R: Read> {$/;"	s
DXTVariant	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dxt.rs	/^impl DXTVariant {$/;"	c
DXTVariant	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dxt.rs	/^pub enum DXTVariant {$/;"	g
DecodableImageHeader	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/decoder.rs	/^trait DecodableImageHeader {$/;"	i
Decoder	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/gif.rs	/^impl<'a, R: Read + 'a> AnimationDecoder<'a> for Decoder<R> {$/;"	c
Decoder	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/gif.rs	/^impl<R: Read> Decoder<R> {$/;"	c
Decoder	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/gif.rs	/^impl<R: Read> ImageDecoder for Decoder<R> {$/;"	c
Decoder	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/gif.rs	/^pub struct Decoder<R: Read> {$/;"	s
Delta	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^    Delta(u8, u8),$/;"	e	enum:RLEInsn
DerefPixel	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^type DerefPixel<I> = <<I as Deref>::Target as GenericImageView>::Pixel;$/;"	t
DerefSubpixel	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^type DerefSubpixel<I> = <DerefPixel<I> as Pixel>::Subpixel;$/;"	t
Dim	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^impl Dim {$/;"	c
Dim	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^struct Dim(usize, usize);$/;"	s
DimensionError	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    DimensionError,$/;"	e	enum:ImageError
DirEntry	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/ico/decoder.rs	/^impl DirEntry {$/;"	c
DirEntry	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/ico/decoder.rs	/^struct DirEntry {$/;"	s
Dynamic	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/encoder.rs	/^    Dynamic,$/;"	e	enum:HeaderStrategy
DynamicImage	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dynimage.rs	/^impl DynamicImage {$/;"	c
DynamicImage	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dynimage.rs	/^impl GenericImage for DynamicImage {$/;"	c
DynamicImage	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dynimage.rs	/^impl GenericImageView for DynamicImage {$/;"	c
DynamicImage	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dynimage.rs	/^pub enum DynamicImage {$/;"	g
EOI	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/encoder.rs	/^static EOI: u8 = 0xD9;$/;"	v
Encoder	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/gif.rs	/^impl<W: Write> Encoder<W> {$/;"	c
Encoder	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/gif.rs	/^pub struct Encoder<W: Write> {$/;"	s
EndOfFile	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^    EndOfFile,$/;"	e	enum:RLEInsn
EndOfRow	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^    EndOfRow,$/;"	e	enum:RLEInsn
Enlargeable	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/traits.rs	/^pub trait Enlargeable: Sized + Bounded + NumCast {$/;"	i
EnumeratePixels	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^impl<'a, P: Pixel + 'a> ExactSizeIterator for EnumeratePixels<'a, P>$/;"	c
EnumeratePixels	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^impl<'a, P: Pixel + 'a> Iterator for EnumeratePixels<'a, P>$/;"	c
EnumeratePixels	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^pub struct EnumeratePixels<'a, P: Pixel + 'a>$/;"	s
EnumeratePixelsMut	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^impl<'a, P: Pixel + 'a> ExactSizeIterator for EnumeratePixelsMut<'a, P>$/;"	c
EnumeratePixelsMut	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^impl<'a, P: Pixel + 'a> Iterator for EnumeratePixelsMut<'a, P>$/;"	c
EnumeratePixelsMut	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^pub struct EnumeratePixelsMut<'a, P: Pixel + 'a>$/;"	s
Error	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^pub enum Error {$/;"	g
FIX_0_298631336	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/transform.rs	/^static FIX_0_298631336: i32 = 2446;$/;"	v
FIX_0_390180644	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/transform.rs	/^static FIX_0_390180644: i32 = 3196;$/;"	v
FIX_0_541196100	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/transform.rs	/^static FIX_0_541196100: i32 = 4433;$/;"	v
FIX_0_765366865	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/transform.rs	/^static FIX_0_765366865: i32 = 6270;$/;"	v
FIX_0_899976223	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/transform.rs	/^static FIX_0_899976223: i32 = 7373;$/;"	v
FIX_1_175875602	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/transform.rs	/^static FIX_1_175875602: i32 = 9633;$/;"	v
FIX_1_501321110	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/transform.rs	/^static FIX_1_501321110: i32 = 12_299;$/;"	v
FIX_1_847759065	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/transform.rs	/^static FIX_1_847759065: i32 = 15_137;$/;"	v
FIX_1_961570560	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/transform.rs	/^static FIX_1_961570560: i32 = 16_069;$/;"	v
FIX_2_053119869	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/transform.rs	/^static FIX_2_053119869: i32 = 16_819;$/;"	v
FIX_2_562915447	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/transform.rs	/^static FIX_2_562915447: i32 = 20_995;$/;"	v
FIX_3_072711026	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/transform.rs	/^static FIX_3_072711026: i32 = 25_172;$/;"	v
FailRead	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/decoder.rs	/^        impl Read for FailRead {$/;"	c	function:tests::pbm_binary_ascii_termination
FailRead	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/decoder.rs	/^        struct FailRead(Cursor<&'static [u8]>);$/;"	s	function:tests::pbm_binary_ascii_termination
Filter	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/imageops/sample.rs	/^pub struct Filter<'a> {$/;"	s
FilterType	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/imageops/sample.rs	/^pub enum FilterType {$/;"	g
FlatSamples	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^impl<Buffer> FlatSamples<Buffer> {$/;"	c
FlatSamples	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^impl<Buffer> Index<(u8, u32, u32)> for FlatSamples<Buffer>$/;"	c
FlatSamples	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^impl<Buffer> IndexMut<(u8, u32, u32)> for FlatSamples<Buffer>$/;"	c
FlatSamples	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^pub struct FlatSamples<Buffer> {$/;"	s
FlatSamples	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/encoder.rs	/^impl<'a> FlatSamples<'a> {$/;"	c
FlatSamples	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/encoder.rs	/^impl<'a> From<&'a [u16]> for FlatSamples<'a> {$/;"	c
FlatSamples	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/encoder.rs	/^impl<'a> From<&'a [u8]> for FlatSamples<'a> {$/;"	c
FlatSamples	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/encoder.rs	/^pub enum FlatSamples<'a> {$/;"	g
Format888	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^    Format888,$/;"	e	enum:FormatFullBytes
FormatError	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    FormatError(String),$/;"	e	enum:ImageError
FormatFullBytes	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^enum FormatFullBytes {$/;"	g
Frame	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/animation.rs	/^impl Frame {$/;"	c
Frame	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/animation.rs	/^pub struct Frame {$/;"	s
Frame	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^pub struct Frame {$/;"	s
Frames	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/animation.rs	/^impl<'a> Frames<'a> {$/;"	c
Frames	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/animation.rs	/^impl<'a> Iterator for Frames<'a> {$/;"	c
Frames	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/animation.rs	/^pub struct Frames<'a> {$/;"	s
FromBottom	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^    FromBottom(Rev<ChunksMut<'a, u8>>),$/;"	e	enum:Chunker
FromColor	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^pub trait FromColor<Other> {$/;"	i
FromTop	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^    FromTop(ChunksMut<'a, u8>),$/;"	e	enum:Chunker
GIF	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    GIF,$/;"	e	enum:ImageFormat
GIF	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    GIF,$/;"	e	enum:ImageOutputFormat
Gaussian	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/imageops/sample.rs	/^    Gaussian,$/;"	e	enum:FilterType
GenericImage	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^pub trait GenericImage: GenericImageView {$/;"	i
GenericImageView	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^pub trait GenericImageView {$/;"	i
GifFrameIterator	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/gif.rs	/^impl<R: Read> GifFrameIterator<R> {$/;"	c
GifFrameIterator	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/gif.rs	/^impl<R: Read> Iterator for GifFrameIterator<R> {$/;"	c
GifFrameIterator	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/gif.rs	/^struct GifFrameIterator<R: Read> {$/;"	s
Gray	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^    Gray(u8),$/;"	e	enum:ColorType
GrayA	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^    GrayA(u8),$/;"	e	enum:ColorType
GrayAlphaImage	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^pub type GrayAlphaImage = ImageBuffer<LumaA<u8>, Vec<u8>>;$/;"	t
GrayImage	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^impl GrayImage {$/;"	c
GrayImage	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^pub type GrayImage = ImageBuffer<Luma<u8>, Vec<u8>>;$/;"	t
GrayU16	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/decoder.rs	/^    GrayU16,$/;"	e	enum:TupleType
GrayU8	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/decoder.rs	/^    GrayU8,$/;"	e	enum:TupleType
Graymap	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/header.rs	/^    Graymap(GraymapHeader),$/;"	e	enum:HeaderRecord
Graymap	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/header.rs	/^    Graymap(SampleEncoding),$/;"	e	enum:PNMSubtype
GraymapHeader	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/decoder.rs	/^impl DecodableImageHeader for GraymapHeader {$/;"	c
GraymapHeader	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/header.rs	/^pub struct GraymapHeader {$/;"	s
Grayscale	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/header.rs	/^    Grayscale,$/;"	e	enum:ArbitraryTuplType
GrayscaleAlpha	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/header.rs	/^    GrayscaleAlpha,$/;"	e	enum:ArbitraryTuplType
HDR	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    HDR,$/;"	e	enum:ImageFormat
HDRAdapter	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_decoder.rs	/^impl<R: BufRead + Seek> ImageDecoderExt for HDRAdapter<R> {$/;"	c
HDRAdapter	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_decoder.rs	/^impl<R: BufRead> HDRAdapter<R> {$/;"	c
HDRAdapter	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_decoder.rs	/^impl<R: BufRead> ImageDecoder for HDRAdapter<R> {$/;"	c
HDRAdapter	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_decoder.rs	/^pub struct HDRAdapter<R: BufRead> {$/;"	s
HDRDecoder	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_decoder.rs	/^impl<R: BufRead> HDRDecoder<R> {$/;"	c
HDRDecoder	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_decoder.rs	/^impl<R: BufRead> IntoIterator for HDRDecoder<R> {$/;"	c
HDRDecoder	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_decoder.rs	/^pub struct HDRDecoder<R> {$/;"	s
HDREncoder	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_encoder.rs	/^impl<W: Write> HDREncoder<W> {$/;"	c
HDREncoder	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_encoder.rs	/^pub struct HDREncoder<W: Write> {$/;"	s
HDRImageDecoderIterator	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_decoder.rs	/^impl<R: BufRead> ExactSizeIterator for HDRImageDecoderIterator<R> {}$/;"	c
HDRImageDecoderIterator	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_decoder.rs	/^impl<R: BufRead> HDRImageDecoderIterator<R> {$/;"	c
HDRImageDecoderIterator	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_decoder.rs	/^impl<R: BufRead> Iterator for HDRImageDecoderIterator<R> {$/;"	c
HDRImageDecoderIterator	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_decoder.rs	/^pub struct HDRImageDecoderIterator<R: BufRead> {$/;"	s
HDRMetadata	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_decoder.rs	/^impl HDRMetadata {$/;"	c
HDRMetadata	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_decoder.rs	/^pub struct HDRMetadata {$/;"	s
Header	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/tga/decoder.rs	/^impl Header {$/;"	c
Header	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/tga/decoder.rs	/^struct Header {$/;"	s
HeaderReader	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/decoder.rs	/^trait HeaderReader: BufRead {$/;"	i
HeaderRecord	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/header.rs	/^pub(crate) enum HeaderRecord {$/;"	g
HeaderStrategy	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/encoder.rs	/^enum HeaderStrategy {$/;"	g
Hit	/home/go/Documents/Rust/renderer/src/geometry/ray.rs	/^pub trait Hit {$/;"	i
ICO	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    ICO,$/;"	e	enum:ImageFormat
ICO	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    ICO,$/;"	e	enum:ImageOutputFormat
ICODecoder	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/ico/decoder.rs	/^impl<R: Read + Seek> ICODecoder<R> {$/;"	c
ICODecoder	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/ico/decoder.rs	/^impl<R: Read + Seek> ImageDecoder for ICODecoder<R> {$/;"	c
ICODecoder	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/ico/decoder.rs	/^pub struct ICODecoder<R: Read> {$/;"	s
ICOEncoder	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/ico/encoder.rs	/^impl<W: Write> ICOEncoder<W> {$/;"	c
ICOEncoder	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/ico/encoder.rs	/^pub struct ICOEncoder<W: Write> {$/;"	s
ImageBgr8	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dynimage.rs	/^    ImageBgr8(BgrImage),$/;"	e	enum:DynamicImage
ImageBgra8	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dynimage.rs	/^    ImageBgra8(BgraImage),$/;"	e	enum:DynamicImage
ImageBuffer	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^impl<'a, 'b, Container, FromType: Pixel + 'static, ToType: Pixel + 'static>$/;"	c
ImageBuffer	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^impl<P, Container> Clone for ImageBuffer<P, Container>$/;"	c
ImageBuffer	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^impl<P, Container> Deref for ImageBuffer<P, Container>$/;"	c
ImageBuffer	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^impl<P, Container> DerefMut for ImageBuffer<P, Container>$/;"	c
ImageBuffer	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^impl<P, Container> GenericImage for ImageBuffer<P, Container>$/;"	c
ImageBuffer	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^impl<P, Container> GenericImageView for ImageBuffer<P, Container>$/;"	c
ImageBuffer	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^impl<P, Container> ImageBuffer<P, Container>$/;"	c
ImageBuffer	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^impl<P, Container> Index<(u32, u32)> for ImageBuffer<P, Container>$/;"	c
ImageBuffer	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^impl<P, Container> IndexMut<(u32, u32)> for ImageBuffer<P, Container>$/;"	c
ImageBuffer	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^impl<P: Pixel + 'static> ImageBuffer<P, Vec<P::Subpixel>>$/;"	c
ImageBuffer	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^pub struct ImageBuffer<P: Pixel, Container> {$/;"	s
ImageDecoder	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^pub trait ImageDecoder: Sized {$/;"	i
ImageDecoderExt	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^pub trait ImageDecoderExt: ImageDecoder + Sized {$/;"	i
ImageEnd	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    ImageEnd,$/;"	e	enum:ImageError
ImageError	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^impl From<Error> for ImageError {$/;"	c
ImageError	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/gif.rs	/^impl From<gif::DecodingError> for ImageError {$/;"	c
ImageError	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^impl Error for ImageError {$/;"	c
ImageError	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^impl From<io::Error> for ImageError {$/;"	c
ImageError	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^impl fmt::Display for ImageError {$/;"	c
ImageError	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^pub enum ImageError {$/;"	g
ImageError	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/decoder.rs	/^impl From<jpeg_decoder::Error> for ImageError {$/;"	c
ImageError	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/png.rs	/^impl From<png::DecodingError> for ImageError {$/;"	c
ImageError	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/tiff.rs	/^impl From<tiff::TiffError> for ImageError {$/;"	c
ImageFormat	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^pub enum ImageFormat {$/;"	g
ImageLuma8	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dynimage.rs	/^    ImageLuma8(GrayImage),$/;"	e	enum:DynamicImage
ImageLumaA8	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dynimage.rs	/^    ImageLumaA8(GrayAlphaImage),$/;"	e	enum:DynamicImage
ImageOutputFormat	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^impl From<ImageFormat> for ImageOutputFormat {$/;"	c
ImageOutputFormat	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^pub enum ImageOutputFormat {$/;"	g
ImagePacked	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    ImagePacked,$/;"	e	enum:NormalForm
ImageReadBuffer	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^impl ImageReadBuffer {$/;"	c
ImageReadBuffer	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^pub(crate) struct ImageReadBuffer {$/;"	s
ImageResult	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^pub type ImageResult<T> = Result<T, ImageError>;$/;"	t
ImageRgb8	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dynimage.rs	/^    ImageRgb8(RgbImage),$/;"	e	enum:DynamicImage
ImageRgba8	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dynimage.rs	/^    ImageRgba8(RgbaImage),$/;"	e	enum:DynamicImage
ImageType	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^enum ImageType {$/;"	g
ImageType	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/tga/decoder.rs	/^enum ImageType {$/;"	g
ImageType	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/tga/decoder.rs	/^impl ImageType {$/;"	c
Info	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^    Info,$/;"	e	enum:BMPHeaderType
InnerDecoder	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/ico/decoder.rs	/^enum InnerDecoder<R: Read> {$/;"	g
InnerImage	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    type InnerImage = Self;$/;"	t
InnerImage	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dynimage.rs	/^    type InnerImage = DynamicImage;$/;"	t	implementation:DynamicImage
InnerImage	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    type InnerImage = Self;$/;"	t
InnerImage	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    type InnerImage = I::Target;$/;"	t
InnerImage	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    type InnerImage: GenericImage<Pixel = Self::Pixel>;$/;"	t	interface:GenericImage
InnerImageView	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    type InnerImageView = Self;$/;"	t
InnerImageView	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dynimage.rs	/^    type InnerImageView = Self;$/;"	t	implementation:DynamicImage
InnerImageView	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    type InnerImageView = Self;$/;"	t
InnerImageView	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    type InnerImageView = I::Target;$/;"	t
InnerImageView	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    type InnerImageView: GenericImageView<Pixel = Self::Pixel>;$/;"	t	interface:GenericImageView
InsufficientMemory	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    InsufficientMemory,$/;"	e	enum:ImageError
IntoImageError	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_decoder.rs	/^trait IntoImageError<T> {$/;"	i
IntoIter	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_decoder.rs	/^    type IntoIter = HDRImageDecoderIterator<R>;$/;"	t	implementation:HDRDecoder
Invert	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^pub trait Invert {$/;"	i
IoError	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    IoError(io::Error),$/;"	e	enum:ImageError
Item	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/animation.rs	/^    type Item = ImageResult<Frame>;$/;"	t	implementation:Frames
Item	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^    type Item = &'a mut [u8];$/;"	t	implementation:RowIterator
Item	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^    type Item = RLEInsn;$/;"	t	implementation:RLEInsnIterator
Item	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    type Item = &'a P;$/;"	t
Item	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    type Item = &'a mut P;$/;"	t
Item	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    type Item = (u32, u32, &'a P);$/;"	t
Item	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    type Item = (u32, u32, &'a mut P);$/;"	t
Item	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/gif.rs	/^    type Item = ImageResult<animation::Frame>;$/;"	t	implementation:GifFrameIterator
Item	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_decoder.rs	/^    type Item = ImageResult<RGBE8Pixel>;$/;"	t	implementation:HDRDecoder
Item	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_decoder.rs	/^    type Item = ImageResult<RGBE8Pixel>;$/;"	t	implementation:HDRImageDecoderIterator
Item	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_encoder.rs	/^    type Item = RunOrNot;$/;"	t	implementation:NorunCombineIterator
Item	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_encoder.rs	/^    type Item = RunOrNot;$/;"	t	implementation:RunIterator
Item	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    type Item = (u32, u32, &'a mut I::Pixel);$/;"	t
Item	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    type Item = (u32, u32, I::Pixel);$/;"	t	implementation:Pixels
JPEG	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    JPEG(u8),$/;"	e	enum:ImageOutputFormat
JPEG	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    JPEG,$/;"	e	enum:ImageFormat
JPEGDecoder	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/decoder.rs	/^impl<R: Read> ImageDecoder for JPEGDecoder<R> {$/;"	c
JPEGDecoder	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/decoder.rs	/^impl<R: Read> JPEGDecoder<R> {$/;"	c
JPEGDecoder	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/decoder.rs	/^pub struct JPEGDecoder<R> {$/;"	s
JPEGEncoder	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/encoder.rs	/^impl<'a, W: Write> JPEGEncoder<'a, W> {$/;"	c
JPEGEncoder	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/encoder.rs	/^pub struct JPEGEncoder<'a, W: 'a> {$/;"	s
KEYFRAME_BPRED_MODE_PROBS	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^static KEYFRAME_BPRED_MODE_PROBS: [[[u8; 9]; 10]; 10] = [$/;"	v
KEYFRAME_BPRED_MODE_TREE	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^static KEYFRAME_BPRED_MODE_TREE: [i8; 18] = [$/;"	v
KEYFRAME_UV_MODE_PROBS	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^static KEYFRAME_UV_MODE_PROBS: [Prob; 3] = [142, 114, 183];$/;"	v
KEYFRAME_UV_MODE_TREE	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^static KEYFRAME_UV_MODE_TREE: [i8; 6] = [-DC_PRED, 2, -V_PRED, 4, -H_PRED, -TM_PRED];$/;"	v
KEYFRAME_YMODE_PROBS	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^static KEYFRAME_YMODE_PROBS: [Prob; 4] = [145, 156, 163, 128];$/;"	v
KEYFRAME_YMODE_TREE	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^static KEYFRAME_YMODE_TREE: [i8; 8] = [-B_PRED, 2, 4, 6, -DC_PRED, -V_PRED, -H_PRED, -TM_PRED];$/;"	v
LOOKUP_TABLE_3_BIT_TO_8_BIT	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^static LOOKUP_TABLE_3_BIT_TO_8_BIT: [u8; 8] = [0, 36, 73, 109, 146, 182, 219, 255];$/;"	v
LOOKUP_TABLE_4_BIT_TO_8_BIT	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^static LOOKUP_TABLE_4_BIT_TO_8_BIT: [u8; 16] = [$/;"	v
LOOKUP_TABLE_5_BIT_TO_8_BIT	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^static LOOKUP_TABLE_5_BIT_TO_8_BIT: [u8; 32] = [$/;"	v
LOOKUP_TABLE_6_BIT_TO_8_BIT	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^static LOOKUP_TABLE_6_BIT_TO_8_BIT: [u8; 64] = [$/;"	v
LUMADESTINATION	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/encoder.rs	/^static LUMADESTINATION: u8 = 0;$/;"	v
LUMAID	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/encoder.rs	/^static LUMAID: u8 = 1;$/;"	v
Lanczos3	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/imageops/sample.rs	/^    Lanczos3,$/;"	e	enum:FilterType
Larger	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/traits.rs	/^    type Larger = u32;$/;"	t	implementation:u16
Larger	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/traits.rs	/^    type Larger = u32;$/;"	t	implementation:u8
Larger	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/traits.rs	/^    type Larger = u64;$/;"	t	implementation:u32
Larger	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/traits.rs	/^    type Larger: Primitive + AddAssign + 'static;$/;"	t	interface:Enlargeable
Light	/home/go/Documents/Rust/renderer/src/light.rs	/^pub struct Light {$/;"	s
Luma	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^impl<T: Primitive + 'static> FromColor<Bgr<T>> for Luma<T> {$/;"	c
Luma	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^impl<T: Primitive + 'static> FromColor<Bgra<T>> for Luma<T> {$/;"	c
Luma	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^impl<T: Primitive + 'static> FromColor<LumaA<T>> for Luma<T> {$/;"	c
Luma	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^impl<T: Primitive + 'static> FromColor<Rgb<T>> for Luma<T> {$/;"	c
Luma	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^impl<T: Primitive + 'static> FromColor<Rgba<T>> for Luma<T> {$/;"	c
Luma	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^impl<T: Primitive> Blend for Luma<T> {$/;"	c
Luma	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^impl<T: Primitive> Invert for Luma<T> {$/;"	c
LumaA	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^impl<T: Primitive + 'static> FromColor<Bgr<T>> for LumaA<T> {$/;"	c
LumaA	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^impl<T: Primitive + 'static> FromColor<Bgra<T>> for LumaA<T> {$/;"	c
LumaA	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^impl<T: Primitive + 'static> FromColor<Luma<T>> for LumaA<T> {$/;"	c
LumaA	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^impl<T: Primitive + 'static> FromColor<Rgb<T>> for LumaA<T> {$/;"	c
LumaA	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^impl<T: Primitive + 'static> FromColor<Rgba<T>> for LumaA<T> {$/;"	c
LumaA	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^impl<T: Primitive> Blend for LumaA<T> {$/;"	c
LumaA	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^impl<T: Primitive> Invert for LumaA<T> {$/;"	c
MAGIC_BYTES	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dynimage.rs	/^static MAGIC_BYTES: [(&'static [u8], ImageFormat); 17] = [$/;"	v
MacroBlock	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^impl MacroBlock {$/;"	c
MacroBlock	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^struct MacroBlock {$/;"	s
Material	/home/go/Documents/Rust/renderer/src/material.rs	/^pub struct Material {$/;"	s
MockDecoder	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^        impl ImageDecoder for MockDecoder {$/;"	c	function:tests::test_load_rect
MockDecoder	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^        struct MockDecoder {scanline_number: u64, scanline_bytes: u64}$/;"	s	function:tests::test_load_rect
MutPixels	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^impl<'a, I: GenericImage + 'a> Iterator for MutPixels<'a, I>$/;"	c
MutPixels	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^pub struct MutPixels<'a, I: ?Sized + 'a> {$/;"	s
Nearest	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/imageops/sample.rs	/^    Nearest,$/;"	e	enum:FilterType
NeuQuant	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/imageops/colorops.rs	/^impl ColorMap for nq::NeuQuant {$/;"	c
NeuQuant	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/math/nq.rs	/^impl NeuQuant {$/;"	c
NeuQuant	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/math/nq.rs	/^pub struct NeuQuant {$/;"	s
Neuron	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/math/nq.rs	/^type Neuron = Quad<f64>;$/;"	t
New	/home/go/Documents/Rust/renderer/src/geometry/bounds.rs	/^pub trait New<T> {$/;"	i
NoImageData	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/tga/decoder.rs	/^    NoImageData = 0,$/;"	e	enum:ImageType
Normal3	/home/go/Documents/Rust/renderer/src/geometry/normal.rs	/^impl<T: Add<Output = T> + Copy> AddAssign for Normal3<T> {$/;"	c
Normal3	/home/go/Documents/Rust/renderer/src/geometry/normal.rs	/^impl<T: Add<Output = T>> Add for Normal3<T> {$/;"	c
Normal3	/home/go/Documents/Rust/renderer/src/geometry/normal.rs	/^impl<T: Div<Output = T> + Copy> Div<T> for Normal3<T> {$/;"	c
Normal3	/home/go/Documents/Rust/renderer/src/geometry/normal.rs	/^impl<T: Div<Output = T> + Copy> DivAssign<T> for Normal3<T> {$/;"	c
Normal3	/home/go/Documents/Rust/renderer/src/geometry/normal.rs	/^impl<T: Mul<Output = T> + Copy> Mul<T> for Normal3<T> {$/;"	c
Normal3	/home/go/Documents/Rust/renderer/src/geometry/normal.rs	/^impl<T: Mul<Output = T> + Copy> MulAssign<T> for Normal3<T> {$/;"	c
Normal3	/home/go/Documents/Rust/renderer/src/geometry/normal.rs	/^impl<T: Sub<Output = T> + Copy> SubAssign for Normal3<T> {$/;"	c
Normal3	/home/go/Documents/Rust/renderer/src/geometry/normal.rs	/^impl<T: Sub<Output = T>> Sub for Normal3<T> {$/;"	c
Normal3	/home/go/Documents/Rust/renderer/src/geometry/normal.rs	/^impl<T> From<Vector3<T>> for Normal3<T> {$/;"	c
Normal3	/home/go/Documents/Rust/renderer/src/geometry/normal.rs	/^impl<T> Index<u32> for Normal3<T> {$/;"	c
Normal3	/home/go/Documents/Rust/renderer/src/geometry/normal.rs	/^pub struct Normal3<T> {$/;"	s
Normal3f	/home/go/Documents/Rust/renderer/src/geometry/normal.rs	/^impl Normal3f {$/;"	c
Normal3f	/home/go/Documents/Rust/renderer/src/geometry/normal.rs	/^pub type Normal3f = Normal3<f64>;$/;"	t
NormalForm	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^impl PartialOrd for NormalForm {$/;"	c
NormalForm	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^pub enum NormalForm {$/;"	g
NormalFormRequired	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    NormalFormRequired(NormalForm),$/;"	e	enum:Error
Norun	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_encoder.rs	/^    Norun(usize, usize),$/;"	e	enum:RunOrNot
NorunCombineIterator	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_encoder.rs	/^impl<'a> Iterator for NorunCombineIterator<'a> {$/;"	c
NorunCombineIterator	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_encoder.rs	/^impl<'a> NorunCombineIterator<'a> {$/;"	c
NorunCombineIterator	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_encoder.rs	/^struct NorunCombineIterator<'a> {$/;"	s
NotEnoughData	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    NotEnoughData,$/;"	e	enum:ImageError
Output	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    type Output = P;$/;"	t
Output	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    type Output = Buffer::Output;$/;"	t
Output	/home/go/Documents/Rust/renderer/src/geometry/bounds.rs	/^    type Output = Bounds3<T>;$/;"	t	implementation:Bounds3
Output	/home/go/Documents/Rust/renderer/src/geometry/bounds.rs	/^    type Output = Point3<T>;$/;"	t	implementation:Bounds3
Output	/home/go/Documents/Rust/renderer/src/geometry/bounds.rs	/^    type Output;$/;"	t	interface:New
Output	/home/go/Documents/Rust/renderer/src/geometry/normal.rs	/^    type Output = Normal3<T>;$/;"	t	implementation:Normal3
Output	/home/go/Documents/Rust/renderer/src/geometry/normal.rs	/^    type Output = T;$/;"	t	implementation:Normal3
Output	/home/go/Documents/Rust/renderer/src/geometry/point.rs	/^    type Output = Point3<T>;$/;"	t	implementation:Point3
Output	/home/go/Documents/Rust/renderer/src/geometry/point.rs	/^    type Output = Point3f;$/;"	t	implementation:f64
Output	/home/go/Documents/Rust/renderer/src/geometry/point.rs	/^    type Output = T;$/;"	t	implementation:Point3
Output	/home/go/Documents/Rust/renderer/src/geometry/point.rs	/^    type Output = Vector3<T>;$/;"	t	implementation:Point3
Output	/home/go/Documents/Rust/renderer/src/geometry/vector.rs	/^    type Output = T;$/;"	t	implementation:Vector3
Output	/home/go/Documents/Rust/renderer/src/geometry/vector.rs	/^    type Output = Vector3<T>;$/;"	t	implementation:Vector3
Output	/home/go/Documents/Rust/renderer/src/spectrum.rs	/^    type Output = Spectrum;$/;"	t	implementation:Spectrum
PASS1_BITS	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/transform.rs	/^static PASS1_BITS: i32 = 2;$/;"	v
PNG	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/ico/decoder.rs	/^    PNG(PNGDecoder<R>),$/;"	e	enum:InnerDecoder
PNG	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    PNG,$/;"	e	enum:ImageFormat
PNG	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    PNG,$/;"	e	enum:ImageOutputFormat
PNGDecoder	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/png.rs	/^impl<R: Read> ImageDecoder for PNGDecoder<R> {$/;"	c
PNGDecoder	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/png.rs	/^impl<R: Read> PNGDecoder<R> {$/;"	c
PNGDecoder	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/png.rs	/^pub struct PNGDecoder<R: Read> {$/;"	s
PNGEncoder	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/png.rs	/^impl<W: Write> PNGEncoder<W> {$/;"	c
PNGEncoder	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/png.rs	/^pub struct PNGEncoder<W: Write> {$/;"	s
PNM	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    PNM(PNMSubtype),$/;"	e	enum:ImageOutputFormat
PNM	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    PNM,$/;"	e	enum:ImageFormat
PNMDecoder	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/decoder.rs	/^impl<R: Read> ImageDecoder for PNMDecoder<R> {$/;"	c
PNMDecoder	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/decoder.rs	/^impl<R: Read> PNMDecoder<R> {$/;"	c
PNMDecoder	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/decoder.rs	/^pub struct PNMDecoder<R> {$/;"	s
PNMEncoder	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/encoder.rs	/^impl<W: Write> PNMEncoder<W> {$/;"	c
PNMEncoder	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/encoder.rs	/^pub struct PNMEncoder<W: Write> {$/;"	s
PNMHeader	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/header.rs	/^impl From<ArbitraryHeader> for PNMHeader {$/;"	c
PNMHeader	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/header.rs	/^impl From<BitmapHeader> for PNMHeader {$/;"	c
PNMHeader	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/header.rs	/^impl From<GraymapHeader> for PNMHeader {$/;"	c
PNMHeader	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/header.rs	/^impl From<PixmapHeader> for PNMHeader {$/;"	c
PNMHeader	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/header.rs	/^impl PNMHeader {$/;"	c
PNMHeader	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/header.rs	/^pub struct PNMHeader {$/;"	s
PNMSubtype	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/header.rs	/^impl PNMSubtype {$/;"	c
PNMSubtype	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/header.rs	/^pub enum PNMSubtype {$/;"	g
PROB_DCT_CAT	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^static PROB_DCT_CAT: [[Prob; 12]; 6] = [$/;"	v
Palette	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^    Palette,$/;"	e	enum:ImageType
Palette	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^    Palette(u8),$/;"	e	enum:ColorType
PbmBit	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/decoder.rs	/^    PbmBit,$/;"	e	enum:TupleType
PbmBit	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/decoder.rs	/^impl Sample for PbmBit {$/;"	c
PbmBit	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/decoder.rs	/^struct PbmBit;$/;"	s
PbmBits	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/encoder.rs	/^    PbmBits {$/;"	e	enum:TupleEncoding
Pixel	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    type Pixel = P;$/;"	t
Pixel	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^pub trait Pixel: Copy + Clone {$/;"	i
Pixel	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dynimage.rs	/^    type Pixel = color::Rgba<u8>;$/;"	t	implementation:DynamicImage
Pixel	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    type Pixel = P;$/;"	t
Pixel	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    type Pixel = DerefPixel<I>;$/;"	t
Pixel	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    type Pixel: Pixel;$/;"	t	interface:GenericImageView
PixelPacked	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    PixelPacked,$/;"	e	enum:NormalForm
PixelRun	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^    PixelRun(u8, u8),$/;"	e	enum:RLEInsn
Pixels	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^impl<'a, P: Pixel + 'a> DoubleEndedIterator for Pixels<'a, P>$/;"	c
Pixels	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^impl<'a, P: Pixel + 'a> ExactSizeIterator for Pixels<'a, P>$/;"	c
Pixels	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^impl<'a, P: Pixel + 'a> Iterator for Pixels<'a, P>$/;"	c
Pixels	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^pub struct Pixels<'a, P: Pixel + 'a>$/;"	s
Pixels	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^impl<'a, I: GenericImageView> Iterator for Pixels<'a, I> {$/;"	c
Pixels	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^pub struct Pixels<'a, I: ?Sized + 'a> {$/;"	s
PixelsMut	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^impl<'a, P: Pixel + 'a> DoubleEndedIterator for PixelsMut<'a, P>$/;"	c
PixelsMut	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^impl<'a, P: Pixel + 'a> ExactSizeIterator for PixelsMut<'a, P>$/;"	c
PixelsMut	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^impl<'a, P: Pixel + 'a> Iterator for PixelsMut<'a, P>$/;"	c
PixelsMut	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^pub struct PixelsMut<'a, P: Pixel + 'a>$/;"	s
Pixmap	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/header.rs	/^    Pixmap(PixmapHeader),$/;"	e	enum:HeaderRecord
Pixmap	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/header.rs	/^    Pixmap(SampleEncoding),$/;"	e	enum:PNMSubtype
PixmapHeader	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/decoder.rs	/^impl DecodableImageHeader for PixmapHeader {$/;"	c
PixmapHeader	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/header.rs	/^pub struct PixmapHeader {$/;"	s
Plane	/home/go/Documents/Rust/renderer/src/geometry/object.rs	/^impl Hit for Plane {$/;"	c
Plane	/home/go/Documents/Rust/renderer/src/geometry/object.rs	/^pub struct Plane {$/;"	s
Point3	/home/go/Documents/Rust/renderer/src/geometry/point.rs	/^impl<T: Add<Output = T> + Copy> AddAssign for Point3<T> {$/;"	c
Point3	/home/go/Documents/Rust/renderer/src/geometry/point.rs	/^impl<T: Add<Output = T>> Add<Point3<T>> for Point3<T> {$/;"	c
Point3	/home/go/Documents/Rust/renderer/src/geometry/point.rs	/^impl<T: Add<Output = T>> Add<Vector3<T>> for Point3<T> {$/;"	c
Point3	/home/go/Documents/Rust/renderer/src/geometry/point.rs	/^impl<T: Div<Output = T> + Copy> Div<T> for Point3<T> {$/;"	c
Point3	/home/go/Documents/Rust/renderer/src/geometry/point.rs	/^impl<T: Div<Output = T> + Copy> DivAssign<T> for Point3<T> {$/;"	c
Point3	/home/go/Documents/Rust/renderer/src/geometry/point.rs	/^impl<T: Mul<Output = T> + Copy> Mul<T> for Point3<T> {$/;"	c
Point3	/home/go/Documents/Rust/renderer/src/geometry/point.rs	/^impl<T: Mul<Output = T> + Copy> MulAssign<T> for Point3<T> {$/;"	c
Point3	/home/go/Documents/Rust/renderer/src/geometry/point.rs	/^impl<T: Sub<Output = T> + Copy> SubAssign<Vector3<T>> for Point3<T> {$/;"	c
Point3	/home/go/Documents/Rust/renderer/src/geometry/point.rs	/^impl<T: Sub<Output = T>> Sub<Point3<T>> for Point3<T> {$/;"	c
Point3	/home/go/Documents/Rust/renderer/src/geometry/point.rs	/^impl<T: Sub<Output = T>> Sub<Vector3<T>> for Point3<T> {$/;"	c
Point3	/home/go/Documents/Rust/renderer/src/geometry/point.rs	/^impl<T> Index<u32> for Point3<T> {$/;"	c
Point3	/home/go/Documents/Rust/renderer/src/geometry/point.rs	/^pub struct Point3<T> {$/;"	s
Point3f	/home/go/Documents/Rust/renderer/src/geometry/point.rs	/^pub type Point3f = Point3<f64>;$/;"	t
Primitive	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/traits.rs	/^pub trait Primitive: Copy + NumCast + Num + PartialOrd<Self> + Clone + Bounded {}$/;"	i
Prob	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^type Prob = u8;$/;"	t
Progress	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^pub struct Progress {$/;"	s
Quad	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/math/nq.rs	/^struct Quad<T> {$/;"	s
R5_G5_B5_COLOR_MASK	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^static R5_G5_B5_COLOR_MASK: Bitfields = Bitfields {$/;"	v
RGB	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^    RGB(u8),$/;"	e	enum:ColorType
RGB	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/header.rs	/^    RGB,$/;"	e	enum:ArbitraryTuplType
RGB16	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^    RGB16,$/;"	e	enum:ImageType
RGB24	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^    RGB24,$/;"	e	enum:FormatFullBytes
RGB24	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^    RGB24,$/;"	e	enum:ImageType
RGB32	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^    RGB32,$/;"	e	enum:FormatFullBytes
RGB32	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^    RGB32,$/;"	e	enum:ImageType
RGBA	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^    RGBA(u8),$/;"	e	enum:ColorType
RGBA32	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^    RGBA32,$/;"	e	enum:FormatFullBytes
RGBA32	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^    RGBA32,$/;"	e	enum:ImageType
RGBAlpha	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/header.rs	/^    RGBAlpha,$/;"	e	enum:ArbitraryTuplType
RGBE8Pixel	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_decoder.rs	/^impl RGBE8Pixel {$/;"	c
RGBE8Pixel	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_decoder.rs	/^pub struct RGBE8Pixel {$/;"	s
RGBU16	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/decoder.rs	/^    RGBU16,$/;"	e	enum:TupleType
RGBU8	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/decoder.rs	/^    RGBU8,$/;"	e	enum:TupleType
RLE4	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^    RLE4,$/;"	e	enum:ImageType
RLE8	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^    RLE8,$/;"	e	enum:ImageType
RLEInsn	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^enum RLEInsn {$/;"	g
RLEInsnIterator	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^impl<'a, R: Read> Iterator for RLEInsnIterator<'a, R> {$/;"	c
RLEInsnIterator	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^struct RLEInsnIterator<'a, R: 'a + Read> {$/;"	s
RawColorMap	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/tga/decoder.rs	/^    RawColorMap = 1,$/;"	e	enum:ImageType
RawGrayScale	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/tga/decoder.rs	/^    RawGrayScale = 3,$/;"	e	enum:ImageType
RawTrueColor	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/tga/decoder.rs	/^    RawTrueColor = 2,$/;"	e	enum:ImageType
Ray	/home/go/Documents/Rust/renderer/src/geometry/ray.rs	/^pub struct Ray {$/;"	s
Reader	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^    type Reader = Cursor<Vec<u8>>;$/;"	t	implementation:BMPDecoder
Reader	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dxt.rs	/^    type Reader = DXTReader<R>;$/;"	t	implementation:DXTDecoder
Reader	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/gif.rs	/^    type Reader = Cursor<Vec<u8>>;$/;"	t	implementation:Decoder
Reader	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_decoder.rs	/^    type Reader = Cursor<Vec<u8>>;$/;"	t	implementation:HDRAdapter
Reader	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/ico/decoder.rs	/^    type Reader = Cursor<Vec<u8>>;$/;"	t	implementation:ICODecoder
Reader	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^            type Reader = Box<::std::io::Read>;$/;"	t	implementation:tests::test_load_rect::MockDecoder
Reader	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    type Reader: Read;$/;"	t	interface:ImageDecoder
Reader	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/decoder.rs	/^    type Reader = Cursor<Vec<u8>>;$/;"	t	implementation:JPEGDecoder
Reader	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/png.rs	/^    type Reader = Cursor<Vec<u8>>;$/;"	t	implementation:PNGDecoder
Reader	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/decoder.rs	/^    type Reader = Cursor<Vec<u8>>;$/;"	t	implementation:PNMDecoder
Reader	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/tga/decoder.rs	/^    type Reader = TGAReader<R>;$/;"	t	implementation:TGADecoder
Reader	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/tiff.rs	/^    type Reader = Cursor<Vec<u8>>;$/;"	t	implementation:TIFFDecoder
Reader	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/decoder.rs	/^    type Reader = Cursor<Vec<u8>>;$/;"	t	implementation:WebpDecoder
Result	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_decoder.rs	/^impl<T> IntoImageError<T> for ::std::result::Result<T, ::std::num::ParseFloatError> {$/;"	c
Result	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_decoder.rs	/^impl<T> IntoImageError<T> for ::std::result::Result<T, ::std::num::ParseIntError> {$/;"	c
Rgb	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^impl<T: Primitive + 'static> FromColor<Bgr<T>> for Rgb<T> {$/;"	c
Rgb	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^impl<T: Primitive + 'static> FromColor<Bgra<T>> for Rgb<T> {$/;"	c
Rgb	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^impl<T: Primitive + 'static> FromColor<Luma<T>> for Rgb<T> {$/;"	c
Rgb	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^impl<T: Primitive + 'static> FromColor<LumaA<T>> for Rgb<T> {$/;"	c
Rgb	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^impl<T: Primitive + 'static> FromColor<Rgba<T>> for Rgb<T> {$/;"	c
Rgb	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^impl<T: Primitive> Blend for Rgb<T> {$/;"	c
Rgb	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^impl<T: Primitive> Invert for Rgb<T> {$/;"	c
Rgb	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dxt.rs	/^type Rgb = [u8; 3];$/;"	t
RgbImage	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^pub type RgbImage = ImageBuffer<Rgb<u8>, Vec<u8>>;$/;"	t
Rgba	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^impl<T: Primitive + 'static> FromColor<Bgr<T>> for Rgba<T> {$/;"	c
Rgba	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^impl<T: Primitive + 'static> FromColor<Bgra<T>> for Rgba<T> {$/;"	c
Rgba	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^impl<T: Primitive + 'static> FromColor<Luma<T>> for Rgba<T> {$/;"	c
Rgba	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^impl<T: Primitive + 'static> FromColor<LumaA<T>> for Rgba<T> {$/;"	c
Rgba	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^impl<T: Primitive + 'static> FromColor<Rgb<T>> for Rgba<T> {$/;"	c
Rgba	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^impl<T: Primitive> Blend for Rgba<T> {$/;"	c
Rgba	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^impl<T: Primitive> Invert for Rgba<T> {$/;"	c
RgbaImage	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^pub type RgbaImage = ImageBuffer<Rgba<u8>, Vec<u8>>;$/;"	t
RowIterator	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^impl<'a> Iterator for RowIterator<'a> {$/;"	c
RowIterator	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^pub struct RowIterator<'a> {$/;"	s
RowMajorPacked	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    RowMajorPacked,$/;"	e	enum:NormalForm
Run	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_encoder.rs	/^    Run(u8, usize),$/;"	e	enum:RunOrNot
RunColorMap	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/tga/decoder.rs	/^    RunColorMap = 9,$/;"	e	enum:ImageType
RunGrayScale	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/tga/decoder.rs	/^    RunGrayScale = 11,$/;"	e	enum:ImageType
RunIterator	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_encoder.rs	/^impl<'a> Iterator for RunIterator<'a> {$/;"	c
RunIterator	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_encoder.rs	/^impl<'a> RunIterator<'a> {$/;"	c
RunIterator	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_encoder.rs	/^struct RunIterator<'a> {$/;"	s
RunOrNot	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_encoder.rs	/^enum RunOrNot {$/;"	g
RunTrueColor	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/tga/decoder.rs	/^    RunTrueColor = 10,$/;"	e	enum:ImageType
SEGMENT_ID_TREE	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^static SEGMENT_ID_TREE: [i8; 6] = [2, 4, -0, -1, -2, -3];$/;"	v
SOF0	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/encoder.rs	/^static SOF0: u8 = 0xC0;$/;"	v
SOI	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/encoder.rs	/^static SOI: u8 = 0xD8;$/;"	v
SOS	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/encoder.rs	/^static SOS: u8 = 0xDA;$/;"	v
STD_CHROMA_AC_CODE_LENGTHS	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/encoder.rs	/^static STD_CHROMA_AC_CODE_LENGTHS: [u8; 16] = [$/;"	v
STD_CHROMA_AC_VALUES	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/encoder.rs	/^static STD_CHROMA_AC_VALUES: [u8; 162] = [$/;"	v
STD_CHROMA_DC_CODE_LENGTHS	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/encoder.rs	/^static STD_CHROMA_DC_CODE_LENGTHS: [u8; 16] = [$/;"	v
STD_CHROMA_DC_VALUES	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/encoder.rs	/^static STD_CHROMA_DC_VALUES: [u8; 12] = [$/;"	v
STD_CHROMA_QTABLE	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/encoder.rs	/^static STD_CHROMA_QTABLE: [u8; 64] = [$/;"	v
STD_LUMA_AC_CODE_LENGTHS	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/encoder.rs	/^static STD_LUMA_AC_CODE_LENGTHS: [u8; 16] = [$/;"	v
STD_LUMA_AC_VALUES	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/encoder.rs	/^static STD_LUMA_AC_VALUES: [u8; 162] = [$/;"	v
STD_LUMA_DC_CODE_LENGTHS	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/encoder.rs	/^static STD_LUMA_DC_CODE_LENGTHS: [u8; 16] = [$/;"	v
STD_LUMA_DC_VALUES	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/encoder.rs	/^static STD_LUMA_DC_VALUES: [u8; 12] = [$/;"	v
STD_LUMA_QTABLE	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/encoder.rs	/^static STD_LUMA_QTABLE: [u8; 64] = [$/;"	v
Sample	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/decoder.rs	/^trait Sample {$/;"	i
SampleEncoding	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/header.rs	/^pub enum SampleEncoding {$/;"	g
SampleLayout	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^impl SampleLayout {$/;"	c
SampleLayout	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^pub struct SampleLayout {$/;"	s
SampleWriter	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/encoder.rs	/^impl<'a> SampleWriter<'a> {$/;"	c
SampleWriter	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/encoder.rs	/^struct SampleWriter<'a>(&'a mut Write);$/;"	s
Segment	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^struct Segment {$/;"	s
ShadeRec	/home/go/Documents/Rust/renderer/src/geometry/ray.rs	/^pub struct ShadeRec {$/;"	s
Spectrum	/home/go/Documents/Rust/renderer/src/spectrum.rs	/^impl Add for Spectrum {$/;"	c
Spectrum	/home/go/Documents/Rust/renderer/src/spectrum.rs	/^impl Mul<Spectrum> for Spectrum {$/;"	c
Spectrum	/home/go/Documents/Rust/renderer/src/spectrum.rs	/^impl Mul<f64> for Spectrum {$/;"	c
Spectrum	/home/go/Documents/Rust/renderer/src/spectrum.rs	/^impl Spectrum {$/;"	c
Spectrum	/home/go/Documents/Rust/renderer/src/spectrum.rs	/^pub struct Spectrum {$/;"	s
Sphere	/home/go/Documents/Rust/renderer/src/geometry/object.rs	/^impl Hit for Sphere {$/;"	c
Sphere	/home/go/Documents/Rust/renderer/src/geometry/object.rs	/^pub struct Sphere {$/;"	s
SubImage	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^impl<I> GenericImage for SubImage<I>$/;"	c
SubImage	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^impl<I> GenericImageView for SubImage<I>$/;"	c
SubImage	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^impl<I> SubImage<I> {$/;"	c
SubImage	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^pub struct SubImage<I> {$/;"	s
Subpixel	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    type Subpixel: Primitive;$/;"	t	interface:Pixel
Subpixel	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/imageops/colorops.rs	/^type Subpixel<I> = <<I as GenericImageView>::Pixel as Pixel>::Subpixel;$/;"	t
Subtype	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/encoder.rs	/^    Subtype(PNMSubtype),$/;"	e	enum:HeaderStrategy
TGA	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    TGA,$/;"	e	enum:ImageFormat
TGADecoder	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/tga/decoder.rs	/^impl<R: Read + Seek> ImageDecoder for TGADecoder<R> {$/;"	c
TGADecoder	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/tga/decoder.rs	/^impl<R: Read + Seek> TGADecoder<R> {$/;"	c
TGADecoder	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/tga/decoder.rs	/^pub struct TGADecoder<R> {$/;"	s
TGAReader	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/tga/decoder.rs	/^impl<R: Read + Seek> Read for TGAReader<R> {$/;"	c
TGAReader	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/tga/decoder.rs	/^pub struct TGAReader<R> {$/;"	s
TIFF	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    TIFF,$/;"	e	enum:ImageFormat
TIFFDecoder	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/tiff.rs	/^impl<R: Read + Seek> ImageDecoder for TIFFDecoder<R> {$/;"	c
TIFFDecoder	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/tiff.rs	/^impl<R> TIFFDecoder<R>$/;"	c
TIFFDecoder	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/tiff.rs	/^pub struct TIFFDecoder<R>$/;"	s
Target	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    type Target = [P::Subpixel];$/;"	t
ThumbnailSum	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/imageops/sample.rs	/^impl<S: Primitive + Enlargeable> ThumbnailSum<S> {$/;"	c
ThumbnailSum	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/imageops/sample.rs	/^struct ThumbnailSum<S: Primitive + Enlargeable>(S::Larger, S::Larger, S::Larger, S::Larger);$/;"	s
TokenProbTables	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^type TokenProbTables = [[[[Prob; NUM_DCT_TOKENS - 1]; 3]; 8]; 4];$/;"	t
TooLarge	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    TooLarge,$/;"	e	enum:Error
Triangle	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/imageops/sample.rs	/^    Triangle,$/;"	e	enum:FilterType
TupleEncoding	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/encoder.rs	/^enum TupleEncoding<'a> {$/;"	g
TupleEncoding	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/encoder.rs	/^impl<'a> TupleEncoding<'a> {$/;"	c
TupleType	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/decoder.rs	/^enum TupleType {$/;"	g
TupleType	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/decoder.rs	/^impl TupleType {$/;"	c
U16	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/decoder.rs	/^impl Sample for U16 {$/;"	c
U16	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/decoder.rs	/^struct U16;$/;"	s
U16	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/encoder.rs	/^    U16(&'a [u16]),$/;"	e	enum:FlatSamples
U8	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/decoder.rs	/^impl Sample for U8 {$/;"	c
U8	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/decoder.rs	/^struct U8;$/;"	s
U8	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/encoder.rs	/^    U8(&'a [u8]),$/;"	e	enum:FlatSamples
UNZIGZAG	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/encoder.rs	/^static UNZIGZAG: [u8; 64] = [$/;"	v
Unaliased	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    Unaliased,$/;"	e	enum:NormalForm
UncheckedHeader	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/encoder.rs	/^impl<'a> UncheckedHeader<'a> {$/;"	c
UncheckedHeader	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/encoder.rs	/^struct UncheckedHeader<'a> {$/;"	s
Unknown	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/tga/decoder.rs	/^    Unknown,$/;"	e	enum:ImageType
Unsupported	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    Unsupported(String),$/;"	e	enum:ImageOutputFormat
UnsupportedColor	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    UnsupportedColor(ColorType),$/;"	e	enum:ImageError
UnsupportedError	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    UnsupportedError(String),$/;"	e	enum:ImageError
V2	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^    V2,$/;"	e	enum:BMPHeaderType
V3	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^    V3,$/;"	e	enum:BMPHeaderType
V4	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^    V4,$/;"	e	enum:BMPHeaderType
V5	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^    V5,$/;"	e	enum:BMPHeaderType
VP8Decoder	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^impl<R: Read> VP8Decoder<R> {$/;"	c
VP8Decoder	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^pub struct VP8Decoder<R> {$/;"	s
Vector3	/home/go/Documents/Rust/renderer/src/geometry/vector.rs	/^impl<T: Add<Output = T> + Copy> AddAssign for Vector3<T> {$/;"	c
Vector3	/home/go/Documents/Rust/renderer/src/geometry/vector.rs	/^impl<T: Add<Output = T>> Add for Vector3<T> {$/;"	c
Vector3	/home/go/Documents/Rust/renderer/src/geometry/vector.rs	/^impl<T: Div<Output = T> + Copy> Div<T> for Vector3<T> {$/;"	c
Vector3	/home/go/Documents/Rust/renderer/src/geometry/vector.rs	/^impl<T: Div<Output = T> + Copy> DivAssign<T> for Vector3<T> {$/;"	c
Vector3	/home/go/Documents/Rust/renderer/src/geometry/vector.rs	/^impl<T: Mul<Output = T> + Add<Output = T> + Sub<Output = T> + Copy> Mul<Vector3<T>> for Vector3</;"	c
Vector3	/home/go/Documents/Rust/renderer/src/geometry/vector.rs	/^impl<T: Mul<Output = T> + Copy> Mul<T> for Vector3<T> {$/;"	c
Vector3	/home/go/Documents/Rust/renderer/src/geometry/vector.rs	/^impl<T: Mul<Output = T> + Copy> MulAssign<T> for Vector3<T> {$/;"	c
Vector3	/home/go/Documents/Rust/renderer/src/geometry/vector.rs	/^impl<T: Sub<Output = T> + Copy> SubAssign for Vector3<T> {$/;"	c
Vector3	/home/go/Documents/Rust/renderer/src/geometry/vector.rs	/^impl<T: Sub<Output = T>> Sub for Vector3<T> {$/;"	c
Vector3	/home/go/Documents/Rust/renderer/src/geometry/vector.rs	/^impl<T> From<Normal3<T>> for Vector3<T> {$/;"	c
Vector3	/home/go/Documents/Rust/renderer/src/geometry/vector.rs	/^impl<T> From<Point3<T>> for Vector3<T> {$/;"	c
Vector3	/home/go/Documents/Rust/renderer/src/geometry/vector.rs	/^impl<T> Index<u32> for Vector3<T> {$/;"	c
Vector3	/home/go/Documents/Rust/renderer/src/geometry/vector.rs	/^impl<T> Vector3<T>$/;"	c
Vector3	/home/go/Documents/Rust/renderer/src/geometry/vector.rs	/^pub struct Vector3<T> {$/;"	s
Vector3f	/home/go/Documents/Rust/renderer/src/geometry/vector.rs	/^impl Vector3f {$/;"	c
Vector3f	/home/go/Documents/Rust/renderer/src/geometry/vector.rs	/^pub type Vector3f = Vector3<f64>;$/;"	t
View	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^impl<Buffer, P: Pixel> GenericImageView for View<Buffer, P> $/;"	c
View	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^impl<Buffer, P: Pixel> View<Buffer, P>$/;"	c
View	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^pub struct View<Buffer, P: Pixel> $/;"	s
ViewMut	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^impl<Buffer, P: Pixel> GenericImage for ViewMut<Buffer, P> $/;"	c
ViewMut	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^impl<Buffer, P: Pixel> GenericImageView for ViewMut<Buffer, P> $/;"	c
ViewMut	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^impl<Buffer, P: Pixel> ViewMut<Buffer, P>$/;"	c
ViewMut	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^pub struct ViewMut<Buffer, P: Pixel> $/;"	s
ViewPlane	/home/go/Documents/Rust/renderer/src/geometry/world.rs	/^struct ViewPlane {$/;"	s	implementation:World
WEBP	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    WEBP,$/;"	e	enum:ImageFormat
WebpDecoder	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/decoder.rs	/^impl<R: Read> ImageDecoder for WebpDecoder<R> {$/;"	c
WebpDecoder	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/decoder.rs	/^impl<R: Read> WebpDecoder<R> {$/;"	c
WebpDecoder	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/decoder.rs	/^pub struct WebpDecoder<R> {$/;"	s
World	/home/go/Documents/Rust/renderer/src/geometry/world.rs	/^impl World {$/;"	c
World	/home/go/Documents/Rust/renderer/src/geometry/world.rs	/^struct World {$/;"	s
WrongColor	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    WrongColor(ColorType),$/;"	e	enum:Error
ZIGZAG	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^static ZIGZAG: [u8; 16] = [0, 1, 4, 8, 5, 2, 3, 6, 9, 12, 13, 10, 7, 11, 14, 15];$/;"	v
_color	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/encoder.rs	/^    _color: ColorType,$/;"	m	struct:CheckedImageBuffer
_dc_pred	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/encoder.rs	/^    _dc_pred: i32,$/;"	m	struct:Component
_height	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/encoder.rs	/^    _height: u32,$/;"	m	struct:CheckedImageBuffer
_image	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/encoder.rs	/^    _image: CheckedImageBuffer<'a>,$/;"	m	struct:CheckedHeader
_image	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/encoder.rs	/^    _image: FlatSamples<'a>,$/;"	m	struct:CheckedImageBuffer
_phantom	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    _phantom: PhantomData<P>,$/;"	m	struct:ImageBuffer
_width	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/encoder.rs	/^    _width: u32,$/;"	m	struct:CheckedImageBuffer
a	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^    a: Bitfield,$/;"	m	struct:Bitfields
a	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_encoder.rs	/^    fn a<T>(mut v: Vec<T>, mut other: Vec<T>) -> Vec<T> {$/;"	f	function:noruncombine_test
a	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/math/nq.rs	/^    a: T,$/;"	m	struct:Quad
ac_table	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/encoder.rs	/^    ac_table: u8,$/;"	m	struct:Component
accumulator	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/encoder.rs	/^    accumulator: u32,$/;"	m	struct:BitWriter
add	/home/go/Documents/Rust/renderer/src/geometry/normal.rs	/^    fn add(self, other: Normal3<T>) -> Normal3<T> {$/;"	P	implementation:Normal3
add	/home/go/Documents/Rust/renderer/src/geometry/point.rs	/^    fn add(self, other: Point3<T>) -> Point3<T> {$/;"	P	implementation:Point3
add	/home/go/Documents/Rust/renderer/src/geometry/point.rs	/^    fn add(self, other: Vector3<T>) -> Point3<T> {$/;"	P	implementation:Point3
add	/home/go/Documents/Rust/renderer/src/geometry/vector.rs	/^    fn add(self, other: Vector3<T>) -> Vector3<T> {$/;"	P	implementation:Vector3
add	/home/go/Documents/Rust/renderer/src/spectrum.rs	/^    fn add(self, other: Spectrum) -> Spectrum {$/;"	P	implementation:Spectrum
add_alpha_channel	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^    add_alpha_channel: bool,$/;"	m	struct:BMPDecoder
add_assign	/home/go/Documents/Rust/renderer/src/geometry/normal.rs	/^    fn add_assign(&mut self, other: Normal3<T>) {$/;"	P	implementation:Normal3
add_assign	/home/go/Documents/Rust/renderer/src/geometry/point.rs	/^    fn add_assign(&mut self, other: Point3<T>) {$/;"	P	implementation:Point3
add_assign	/home/go/Documents/Rust/renderer/src/geometry/vector.rs	/^    fn add_assign(&mut self, other: Vector3<T>) {$/;"	P	implementation:Vector3
add_pixel	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/imageops/sample.rs	/^    fn add_pixel<P: Pixel<Subpixel=S>>(&mut self, pixel: P) {$/;"	P	implementation:ThumbnailSum
add_residue	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^fn add_residue(pblock: &mut [u8], rblock: &[i32], y0: usize, x0: usize, stride: usize) {$/;"	f
adjust_contrast	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dynimage.rs	/^    pub fn adjust_contrast(&self, c: f32) -> DynamicImage {$/;"	P	implementation:DynamicImage
advance	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_decoder.rs	/^    fn advance(&mut self) {$/;"	P	implementation:HDRImageDecoderIterator
affine	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/imageops/mod.rs	/^mod affine;$/;"	n
aliasing_view	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    fn aliasing_view() {$/;"	f	module:tests
all_smaller	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/encoder.rs	/^    fn all_smaller(&self, max_val: u32) -> bool {$/;"	P	implementation:FlatSamples
alpha_table_dxt5	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dxt.rs	/^fn alpha_table_dxt5(alpha0: u8, alpha1: u8) -> [u8; 8] {$/;"	f
alter_neighbour	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/math/nq.rs	/^    fn alter_neighbour(&mut self, alpha: f64, rad: i32, i: i32, quad: Quad<f64>) {$/;"	P	implementation:NeuQuant
alter_single	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/math/nq.rs	/^    fn alter_single(&mut self, alpha: f64, i: i32, quad: Quad<f64>) {$/;"	P	implementation:NeuQuant
animation	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/lib.rs	/^mod animation;$/;"	n
apply	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    fn apply<F>(&mut self, f: F)$/;"	P	interface:Pixel
apply2	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    fn apply2<F>(&mut self, other: &Self, f: F)$/;"	P	interface:Pixel
apply_with_alpha	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    fn apply_with_alpha<F, G>(&mut self, f: F, g: G)$/;"	P	interface:Pixel
as_arbitrary	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/header.rs	/^    pub fn as_arbitrary(&self) -> Option<&ArbitraryHeader> {$/;"	P	implementation:PNMHeader
as_bgr8	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dynimage.rs	/^    pub fn as_bgr8(&self) -> Option<&BgrImage> {$/;"	P	implementation:DynamicImage
as_bgra8	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dynimage.rs	/^    pub fn as_bgra8(&self) -> Option<&BgraImage> {$/;"	P	implementation:DynamicImage
as_bitmap	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/header.rs	/^    pub fn as_bitmap(&self) -> Option<&BitmapHeader> {$/;"	P	implementation:PNMHeader
as_flat_samples	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    pub fn as_flat_samples(&self) -> FlatSamples<&[P::Subpixel]>$/;"	f
as_flat_samples	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dynimage.rs	/^    pub fn as_flat_samples(&self) -> FlatSamples<&[u8]> {$/;"	P	implementation:DynamicImage
as_graymap	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/header.rs	/^    pub fn as_graymap(&self) -> Option<&GraymapHeader> {$/;"	P	implementation:PNMHeader
as_luma8	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dynimage.rs	/^    pub fn as_luma8(&self) -> Option<&GrayImage> {$/;"	P	implementation:DynamicImage
as_luma_alpha8	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dynimage.rs	/^    pub fn as_luma_alpha8(&self) -> Option<&GrayAlphaImage> {$/;"	P	implementation:DynamicImage
as_mut	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    pub fn as_mut<T>(&mut self) -> FlatSamples<&mut [T]> where Buffer: AsMut<[T]> {$/;"	P	implementation:FlatSamples
as_mut_bgr8	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dynimage.rs	/^    pub fn as_mut_bgr8(&mut self) -> Option<&mut BgrImage> {$/;"	P	implementation:DynamicImage
as_mut_bgra8	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dynimage.rs	/^    pub fn as_mut_bgra8(&mut self) -> Option<&mut BgraImage> {$/;"	P	implementation:DynamicImage
as_mut_luma8	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dynimage.rs	/^    pub fn as_mut_luma8(&mut self) -> Option<&mut GrayImage> {$/;"	P	implementation:DynamicImage
as_mut_luma_alpha8	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dynimage.rs	/^    pub fn as_mut_luma_alpha8(&mut self) -> Option<&mut GrayAlphaImage> {$/;"	P	implementation:DynamicImage
as_mut_rgb8	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dynimage.rs	/^    pub fn as_mut_rgb8(&mut self) -> Option<&mut RgbImage> {$/;"	P	implementation:DynamicImage
as_mut_rgba8	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dynimage.rs	/^    pub fn as_mut_rgba8(&mut self) -> Option<&mut RgbaImage> {$/;"	P	implementation:DynamicImage
as_mut_slice	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    pub fn as_mut_slice<T>(&mut self) -> &mut [T] where Buffer: AsMut<[T]> {$/;"	P	implementation:FlatSamples
as_pixmap	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/header.rs	/^    pub fn as_pixmap(&self) -> Option<&PixmapHeader> {$/;"	P	implementation:PNMHeader
as_ref	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    pub fn as_ref<T>(&self) -> FlatSamples<&[T]> where Buffer: AsRef<[T]> {$/;"	P	implementation:FlatSamples
as_rgb8	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dynimage.rs	/^    pub fn as_rgb8(&self) -> Option<&RgbImage> {$/;"	P	implementation:DynamicImage
as_rgba8	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dynimage.rs	/^    pub fn as_rgba8(&self) -> Option<&RgbaImage> {$/;"	P	implementation:DynamicImage
as_slice	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    pub fn as_slice<T>(&self) -> &[T] where Buffer: AsRef<[T]> {$/;"	P	implementation:FlatSamples
as_view	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    pub fn as_view<P>(&self) -> Result<View<&[P::Subpixel], P>, Error> $/;"	P	implementation:FlatSamples
as_view_mut	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    pub fn as_view_mut<P>(&mut self) -> Result<ViewMut<&mut [P::Subpixel], P>, Error>$/;"	P	implementation:FlatSamples
as_view_with_mut_samples	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    pub fn as_view_with_mut_samples<P>(&mut self) -> Result<View<&mut [P::Subpixel], P>, Error>$/;"	P	implementation:FlatSamples
assert_pixels_eq	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/imageops/affine.rs	/^    macro_rules! assert_pixels_eq {$/;"	M	module:test
autobreak	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/mod.rs	/^mod autobreak;$/;"	n
avg2	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^fn avg2(this: u8, right: u8) -> u8 {$/;"	f
avg3	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^fn avg3(left: u8, this: u8, right: u8) -> u8 {$/;"	f
b	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^    b: Bitfield,$/;"	m	struct:Bitfields
b	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/math/nq.rs	/^    b: T,$/;"	m	struct:Quad
b	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^    b: BoolReader,$/;"	m	struct:VP8Decoder
b	/home/go/Documents/Rust/renderer/src/spectrum.rs	/^    pub b: f64,$/;"	m	struct:Spectrum
background_color	/home/go/Documents/Rust/renderer/src/geometry/world.rs	/^    background_color: RGBColor,$/;"	m	struct:World
background_img	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/gif.rs	/^    background_img: ImageBuffer<Rgba<u8>, Vec<u8>>,$/;"	m	struct:GifFrameIterator
bc_cubic_spline	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/imageops/sample.rs	/^fn bc_cubic_spline(x: f32, b: f32, c: f32) -> f32 {$/;"	f
bench	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dynimage.rs	/^mod bench {$/;"	n
bench_conversion	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    fn bench_conversion(b: &mut test::Bencher) {$/;"	f	module:test
bench_conversion	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dynimage.rs	/^    fn bench_conversion(b: &mut test::Bencher) {$/;"	f	module:bench
bench_image_access_col_by_col	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    fn bench_image_access_col_by_col(b: &mut test::Bencher) {$/;"	f	module:test
bench_image_access_row_by_row	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    fn bench_image_access_row_by_row(b: &mut test::Bencher) {$/;"	f	module:test
bench_resize	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/imageops/sample.rs	/^    fn bench_resize(b: &mut test::Bencher) {$/;"	f	module:tests
bench_thumbnail	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/imageops/sample.rs	/^    fn bench_thumbnail(b: &mut test::Bencher) {$/;"	f	module:tests
bench_thumbnail_upsize	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/imageops/sample.rs	/^    fn bench_thumbnail_upsize(b: &mut test::Bencher) {$/;"	f	module:tests
bench_thumbnail_upsize_irregular	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/imageops/sample.rs	/^    fn bench_thumbnail_upsize_irregular(b: &mut test::Bencher) {$/;"	f	module:tests
best_entry	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/ico/decoder.rs	/^fn best_entry(mut entries: Vec<DirEntry>) -> ImageResult<DirEntry> {$/;"	f
bias	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/math/nq.rs	/^    bias: Vec<f64>, \/\/ bias and freq arrays for learning$/;"	m	struct:NeuQuant
bit_count	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^    bit_count: u16,$/;"	m	struct:BMPDecoder
bit_count	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^    bit_count: u8,$/;"	m	struct:BoolReader
bitfields	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^    bitfields: Option<Bitfields>,$/;"	m	struct:BMPDecoder
bits_per_pixel	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^pub fn bits_per_pixel(c: ColorType) -> usize {$/;"	f
bits_per_pixel	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/ico/decoder.rs	/^    bits_per_pixel: u16,$/;"	m	struct:DirEntry
blank_bytes	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^fn blank_bytes<'a, T: Iterator<Item = &'a mut [u8]>>(iterator: T) {$/;"	f
blend	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    fn blend(&mut self, other: &Self);$/;"	P	interface:Pixel
blend	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^    fn blend(&mut self, other: &Bgr<T>) {$/;"	P	implementation:Bgr
blend	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^    fn blend(&mut self, other: &Bgra<T>) {$/;"	P	implementation:Bgra
blend	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^    fn blend(&mut self, other: &Luma<T>) {$/;"	P	implementation:Luma
blend	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^    fn blend(&mut self, other: &LumaA<T>) {$/;"	P	implementation:LumaA
blend	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^    fn blend(&mut self, other: &Rgb<T>) {$/;"	P	implementation:Rgb
blend	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^    fn blend(&mut self, other: &Rgba<T>) {$/;"	P	implementation:Rgba
blend	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^    fn blend(&mut self, other: &Self);$/;"	P	interface:Blend
blend_pixel	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    fn blend_pixel(&mut self, x: u32, y: u32, p: P) {$/;"	f
blend_pixel	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dynimage.rs	/^    fn blend_pixel(&mut self, x: u32, y: u32, pixel: color::Rgba<u8>) {$/;"	P	implementation:DynamicImage
blend_pixel	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    fn blend_pixel(&mut self, x: u32, y: u32, pixel: Self::Pixel) {$/;"	f
blend_pixel	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    fn blend_pixel(&mut self, x: u32, y: u32, pixel: Self::Pixel) {$/;"	f
blend_pixel	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    fn blend_pixel(&mut self, x: u32, y: u32, pixel: Self::Pixel);$/;"	P	interface:GenericImage
blur	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dynimage.rs	/^    pub fn blur(&self, sigma: f32) -> DynamicImage {$/;"	P	implementation:DynamicImage
blur	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/imageops/sample.rs	/^pub fn blur<I: GenericImageView + 'static>($/;"	f
bmp	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/lib.rs	/^pub mod bmp;$/;"	n
bmp_header_type	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^    bmp_header_type: BMPHeaderType,$/;"	m	struct:BMPDecoder
bounding_sphere	/home/go/Documents/Rust/renderer/src/geometry/bounds.rs	/^    pub fn bounding_sphere(&self) -> (Point3f, f64) {$/;"	P	implementation:Bounds3
bounds	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    fn bounds(&self) -> (u32, u32, u32, u32) {$/;"	f
bounds	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dynimage.rs	/^    fn bounds(&self) -> (u32, u32, u32, u32) {$/;"	P	implementation:DynamicImage
bounds	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    fn bounds(&self) -> (u32, u32, u32, u32) {$/;"	f
bounds	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    pub fn bounds(&self) -> (u8, u32, u32) {$/;"	P	implementation:FlatSamples
bounds	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    pub fn bounds(&self) -> (u8, u32, u32) {$/;"	P	implementation:SampleLayout
bounds	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    fn bounds(&self) -> (u32, u32, u32, u32) {$/;"	f
bounds	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    fn bounds(&self) -> (u32, u32, u32, u32);$/;"	P	interface:GenericImageView
bounds	/home/go/Documents/Rust/renderer/src/geometry/mod.rs	/^pub mod bounds;$/;"	n
box_kernel	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/imageops/sample.rs	/^pub fn box_kernel(_x: f32) -> f32 {$/;"	f
bpred	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^    bpred: [i8; 16],$/;"	m	struct:MacroBlock
brighten	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dynimage.rs	/^    pub fn brighten(&self, value: i32) -> DynamicImage {$/;"	P	implementation:DynamicImage
brighten	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/imageops/colorops.rs	/^pub fn brighten<I, P, S>(image: &I, value: i32) -> ImageBuffer<P, Vec<S>>$/;"	f
buf	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_decoder.rs	/^    buf: Vec<RGBE8Pixel>, \/\/ scanline buffer$/;"	m	struct:HDRImageDecoderIterator
buf	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^    buf: Vec<u8>,$/;"	m	struct:BoolReader
buffer	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/animation.rs	/^    buffer: RgbaImage,$/;"	m	struct:Frame
buffer	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/animation.rs	/^    pub fn buffer(&self) -> &RgbaImage {$/;"	P	implementation:Frame
buffer	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dxt.rs	/^    buffer: ImageReadBuffer,$/;"	m	struct:DXTReader
buffer	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    buffer: Vec<u8>,$/;"	m	struct:ImageReadBuffer
buffer	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/lib.rs	/^mod buffer;$/;"	n
buffer	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/tga/decoder.rs	/^    buffer: ImageReadBuffer,$/;"	m	struct:TGAReader
build	/home/go/Documents/Rust/renderer/src/geometry/world.rs	/^    fn build() {$/;"	P	implementation:World
build_colormap	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/math/nq.rs	/^    fn build_colormap(&mut self) {$/;"	P	implementation:NeuQuant
build_frame_header	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/encoder.rs	/^fn build_frame_header($/;"	f
build_huff_lut	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/entropy.rs	/^pub fn build_huff_lut(bits: &[u8], huffval: &[u8]) -> Vec<(u8, u16)> {$/;"	f
build_huffman_segment	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/encoder.rs	/^fn build_huffman_segment($/;"	f
build_jfif_header	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/encoder.rs	/^fn build_jfif_header(m: &mut Vec<u8>) {$/;"	f
build_netindex	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/math/nq.rs	/^    fn build_netindex(&mut self) {$/;"	P	implementation:NeuQuant
build_quantization_segment	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/encoder.rs	/^fn build_quantization_segment(m: &mut Vec<u8>, precision: u8, identifier: u8, qtable: &[u8]) {$/;"	f
build_scan_header	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/encoder.rs	/^fn build_scan_header(m: &mut Vec<u8>, components: &[Component]) {$/;"	f
bytelen	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/decoder.rs	/^    fn bytelen(width: u32, height: u32, samples: u32) -> ImageResult<usize> {$/;"	P	implementation:BWBit
bytelen	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/decoder.rs	/^    fn bytelen(width: u32, height: u32, samples: u32) -> ImageResult<usize> {$/;"	P	implementation:PbmBit
bytelen	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/decoder.rs	/^    fn bytelen(width: u32, height: u32, samples: u32) -> ImageResult<usize> {$/;"	P	implementation:U16
bytelen	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/decoder.rs	/^    fn bytelen(width: u32, height: u32, samples: u32) -> ImageResult<usize> {$/;"	P	implementation:U8
bytelen	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/decoder.rs	/^    fn bytelen(width: u32, height: u32, samples: u32) -> ImageResult<usize>;$/;"	P	interface:Sample
bytes	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/tga/decoder.rs	/^    bytes: Vec<u8>,$/;"	m	struct:ColorMap
bytes_per_color	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^    fn bytes_per_color(&self) -> usize {$/;"	P	implementation:BMPDecoder
bytes_per_pixel	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/tga/decoder.rs	/^    bytes_per_pixel: usize,$/;"	m	struct:TGADecoder
bytes_to_index	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/tga/decoder.rs	/^        fn bytes_to_index(bytes: &[u8]) -> usize {$/;"	f	method:TGADecoder::expand_color_map
c	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_decoder.rs	/^    pub c: [u8; 3],$/;"	m	struct:RGBE8Pixel
calc_pixel_color	/home/go/Documents/Rust/renderer/src/main.rs	/^fn calc_pixel_color(x: u32, y: u32) -> Spectrum {$/;"	f
calc_primary_ray	/home/go/Documents/Rust/renderer/src/main.rs	/^fn calc_primary_ray(x: u32, y: u32) -> Vector3f {$/;"	f
catmullrom_kernel	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/imageops/sample.rs	/^pub fn catmullrom_kernel(x: f32) -> f32 {$/;"	f
cause	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    fn cause(&self) -> Option<&Error> {$/;"	P	implementation:ImageError
center	/home/go/Documents/Rust/renderer/src/geometry/object.rs	/^    center: Point3f,$/;"	m	struct:Sphere
change_bounds	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    pub fn change_bounds(&mut self, x: u32, y: u32, width: u32, height: u32) {$/;"	P	implementation:SubImage
channel_count	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    fn channel_count() -> u8;$/;"	P	interface:Pixel
channel_stride	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    pub channel_stride: usize,$/;"	m	struct:SampleLayout
channels	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    fn channels(&self) -> &[Self::Subpixel];$/;"	P	interface:Pixel
channels	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    pub channels: u8,$/;"	m	struct:SampleLayout
channels4	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    fn channels4($/;"	P	interface:Pixel
channels_mut	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    fn channels_mut(&mut self) -> &mut [Self::Subpixel];$/;"	P	interface:Pixel
check	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/encoder.rs	/^    fn check($/;"	P	implementation:CheckedImageBuffer
check_for_overflow	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^fn check_for_overflow(width: i32, length: i32, channels: usize) -> ImageResult<()> {$/;"	f
check_header_color	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/encoder.rs	/^    fn check_header_color(self, color: ColorType) -> io::Result<CheckedHeaderColor<'a>> {$/;"	P	implementation:CheckedDimensions
check_header_dimensions	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/encoder.rs	/^    fn check_header_dimensions(self, width: u32, height: u32) -> io::Result<CheckedDimensions<'a/;"	P	implementation:UncheckedHeader
check_image_fits	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    fn check_image_fits(width: u32, height: u32, len: usize) -> bool {$/;"	f
check_sample_values	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/encoder.rs	/^    fn check_sample_values(self, image: FlatSamples<'a>) -> io::Result<CheckedHeader<'a>> {$/;"	P	implementation:CheckedHeaderColor
checked_len	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    fn checked_len(self) -> Option<usize> {$/;"	P	implementation:Dim
chroma_actable	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/encoder.rs	/^    chroma_actable: Vec<(u8, u16)>,$/;"	m	struct:JPEGEncoder
chroma_dctable	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/encoder.rs	/^    chroma_dctable: Vec<(u8, u16)>,$/;"	m	struct:JPEGEncoder
chroma_mode	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^    chroma_mode: i8,$/;"	m	struct:MacroBlock
chunks	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^    chunks: Chunker<'a>,$/;"	m	struct:RowIterator
chunks	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    chunks: Chunks<'a, P::Subpixel>,$/;"	m	struct:Pixels
chunks	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    chunks: ChunksMut<'a, P::Subpixel>,$/;"	m	struct:PixelsMut
clamp	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/math/utils.rs	/^pub fn clamp<N>(a: N, min: N, max: N) -> N$/;"	f
clamp_from	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/traits.rs	/^    fn clamp_from(n: Self::Larger) -> Self {$/;"	P	interface:Enlargeable
clone	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    fn clone(&self) -> ImageBuffer<P, Container> {$/;"	f
cmyk_to_rgb	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/decoder.rs	/^fn cmyk_to_rgb(input: &[u8]) -> Vec<u8> {$/;"	f
col	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_decoder.rs	/^    col: usize,           \/\/ current position in scanline$/;"	m	struct:HDRImageDecoderIterator
collect_frames	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/animation.rs	/^    pub fn collect_frames(self) -> ImageResult<Vec<Frame>> {$/;"	P	implementation:Frames
color	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dynimage.rs	/^    pub fn color(&self) -> color::ColorType {$/;"	P	implementation:DynamicImage
color	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/lib.rs	/^mod color;$/;"	n
color	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/decoder.rs	/^    fn color(self) -> ColorType {$/;"	P	implementation:TupleType
color	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/encoder.rs	/^    color: CheckedHeaderColor<'a>,$/;"	m	struct:CheckedHeader
color	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/encoder.rs	/^    color: ColorType,$/;"	m	struct:CheckedHeaderColor
color_correction	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_decoder.rs	/^    pub color_correction: Option<(f32, f32, f32)>,$/;"	m	struct:HDRMetadata
color_count	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/ico/decoder.rs	/^    color_count: u8,$/;"	m	struct:DirEntry
color_hint	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    pub color_hint: Option<ColorType>,$/;"	m	struct:FlatSamples
color_map	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/tga/decoder.rs	/^    color_map: Option<ColorMap>,$/;"	m	struct:TGADecoder
color_model	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    fn color_model() -> &'static str;$/;"	P	interface:Pixel
color_type	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    fn color_type() -> ColorType;$/;"	P	interface:Pixel
color_type	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/tga/decoder.rs	/^    color_type: ColorType,$/;"	m	struct:TGADecoder
colormap	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/math/nq.rs	/^    colormap: Vec<Color>,$/;"	m	struct:NeuQuant
colorops	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/imageops/mod.rs	/^pub mod colorops;$/;"	n
colors_used	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^    colors_used: u32,$/;"	m	struct:BMPDecoder
colortype	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^    fn colortype(&self) -> ColorType {$/;"	P	implementation:BMPDecoder
colortype	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dxt.rs	/^    fn colortype(&self) -> ColorType {$/;"	P	implementation:DXTDecoder
colortype	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dxt.rs	/^    pub fn colortype(self) -> ColorType {$/;"	P	implementation:DXTVariant
colortype	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/gif.rs	/^    fn colortype(&self) -> color::ColorType {$/;"	P	implementation:Decoder
colortype	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_decoder.rs	/^    fn colortype(&self) -> ColorType {$/;"	P	implementation:HDRAdapter
colortype	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/ico/decoder.rs	/^    fn colortype(&self) -> ColorType {$/;"	P	implementation:ICODecoder
colortype	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^            fn colortype(&self) -> ColorType {  ColorType::Gray(8) }$/;"	P	implementation:tests::test_load_rect::MockDecoder
colortype	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    fn colortype(&self) -> ColorType;$/;"	P	interface:ImageDecoder
colortype	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/decoder.rs	/^    fn colortype(&self) -> ColorType {$/;"	P	implementation:JPEGDecoder
colortype	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/png.rs	/^    colortype: ColorType,$/;"	m	struct:PNGDecoder
colortype	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/png.rs	/^    fn colortype(&self) -> ColorType {$/;"	P	implementation:PNGDecoder
colortype	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/decoder.rs	/^    fn colortype(&self) -> ColorType {$/;"	P	implementation:PNMDecoder
colortype	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/tga/decoder.rs	/^    fn colortype(&self) -> ColorType {$/;"	P	implementation:TGADecoder
colortype	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/tiff.rs	/^    colortype: ColorType,$/;"	m	struct:TIFFDecoder
colortype	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/tiff.rs	/^    fn colortype(&self) -> ColorType {$/;"	P	implementation:TIFFDecoder
colortype	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/decoder.rs	/^    fn colortype(&self) -> color::ColorType {$/;"	P	implementation:WebpDecoder
column_major_packed	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    pub fn column_major_packed(channels: u8, width: u32, height: u32) -> Self {$/;"	P	implementation:SampleLayout
complexity	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^    complexity: [u8; 9],$/;"	m	struct:MacroBlock
components	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/encoder.rs	/^    components: Vec<Component>,$/;"	m	struct:JPEGEncoder
consumed	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    consumed: usize,$/;"	m	struct:ImageReadBuffer
contest	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/math/nq.rs	/^    fn contest(&mut self, b: f64, g: f64, r: f64, a: f64) -> i32 {$/;"	P	implementation:NeuQuant
contrast	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/imageops/colorops.rs	/^pub fn contrast<I, P, S>(image: &I, contrast: f32) -> ImageBuffer<P, Vec<S>>$/;"	f
convert	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    fn convert(&self) -> ImageBuffer<ToType, Vec<ToType::Subpixel>> {$/;"	f
convert	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    fn convert(&self) -> T;$/;"	P	interface:ConvertBuffer
copy_from	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    fn copy_from<O>(&mut self, other: &O, x: u32, y: u32) -> bool$/;"	P	interface:GenericImage
copy_memory	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/lib.rs	/^fn copy_memory(src: &[u8], mut dst: &mut [u8]) {$/;"	f
corner	/home/go/Documents/Rust/renderer/src/geometry/bounds.rs	/^    pub fn corner(&self, corner: u32) -> Point3<T> {$/;"	f
create_border	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^fn create_border(mbx: usize, mby: usize, mbw: usize, top: &[u8], left: &[u8]) -> [u8; 357] {$/;"	f
create_pixel_data	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^    fn create_pixel_data(&self) -> Vec<u8> {$/;"	P	implementation:BMPDecoder
crop	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dynimage.rs	/^    pub fn crop(&mut self, x: u32, y: u32, width: u32, height: u32) -> DynamicImage {$/;"	P	implementation:DynamicImage
crop	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/imageops/mod.rs	/^pub fn crop<I: GenericImageView>($/;"	f
cross	/home/go/Documents/Rust/renderer/src/geometry/vector.rs	/^    pub fn cross(self, other: Vector3<T>) -> Vector3<T> {$/;"	f
curidx	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_encoder.rs	/^    curidx: usize,$/;"	m	struct:RunIterator
current	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    current: u64,$/;"	m	struct:Progress
custom_attributes	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_decoder.rs	/^    pub custom_attributes: Vec<(String, String)>,$/;"	m	struct:HDRMetadata
custom_header_and_color	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/encoder.rs	/^    fn custom_header_and_color() {$/;"	f	module:tests
d	/home/go/Documents/Rust/renderer/src/geometry/ray.rs	/^    pub d: Vector3f,$/;"	m	struct:Ray
data	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    data: Container,$/;"	m	struct:ImageBuffer
data	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_decoder.rs	/^    data: Option<Vec<u8>>,$/;"	m	struct:HDRAdapter
data	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_encoder.rs	/^    data: &'a [u8],$/;"	m	struct:RunIterator
data_offset	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^    data_offset: u64,$/;"	m	struct:BMPDecoder
dc_table	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/encoder.rs	/^    dc_table: u8,$/;"	m	struct:Component
decode_component	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_decoder.rs	/^fn decode_component<R: BufRead, S: FnMut(usize, u8)>($/;"	f
decode_dxt1_block	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dxt.rs	/^fn decode_dxt1_block(source: &[u8], dest: &mut [u8]) {$/;"	f
decode_dxt1_row	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dxt.rs	/^fn decode_dxt1_row(source: &[u8], dest: &mut [u8]) {$/;"	f
decode_dxt3_block	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dxt.rs	/^fn decode_dxt3_block(source: &[u8], dest: &mut [u8]) {$/;"	f
decode_dxt3_row	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dxt.rs	/^fn decode_dxt3_row(source: &[u8], dest: &mut [u8]) {$/;"	f
decode_dxt5_block	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dxt.rs	/^fn decode_dxt5_block(source: &[u8], dest: &mut [u8]) {$/;"	f
decode_dxt5_row	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dxt.rs	/^fn decode_dxt5_row(source: &[u8], dest: &mut [u8]) {$/;"	f
decode_dxt_colors	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dxt.rs	/^fn decode_dxt_colors(source: &[u8], dest: &mut [u8]) {$/;"	f
decode_frame	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^    pub fn decode_frame(&mut self) -> io::Result<&Frame> {$/;"	P	implementation:VP8Decoder
decode_old_rle	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_decoder.rs	/^fn decode_old_rle<R: BufRead>($/;"	f
decoded_bytes_per_block	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dxt.rs	/^    fn decoded_bytes_per_block(self) -> usize {$/;"	P	implementation:DXTVariant
decoder	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/mod.rs	/^mod decoder;$/;"	n
decoder	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dxt.rs	/^    decoder: DXTDecoder<R>,$/;"	m	struct:DXTReader
decoder	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/ico/decoder.rs	/^    fn decoder<R: Read + Seek>(&self, mut r: R) -> ImageResult<InnerDecoder<R>> {$/;"	P	implementation:DirEntry
decoder	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/ico/mod.rs	/^mod decoder;$/;"	n
decoder	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/decoder.rs	/^    decoder: jpeg_decoder::Decoder<R>,$/;"	m	struct:JPEGDecoder
decoder	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/mod.rs	/^mod decoder;$/;"	n
decoder	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/mod.rs	/^mod decoder;$/;"	n
decoder	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/tga/decoder.rs	/^    decoder: TGADecoder<R>,$/;"	m	struct:TGAReader
decoder	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/tga/mod.rs	/^mod decoder;$/;"	n
decoder	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/mod.rs	/^mod decoder;$/;"	n
decoder_to_image	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dynimage.rs	/^pub fn decoder_to_image<I: ImageDecoder>(codec: I) -> ImageResult<DynamicImage> {$/;"	f
default	/home/go/Documents/Rust/renderer/src/geometry/bounds.rs	/^    fn default() -> Bounds3<f64> {$/;"	P	implementation:Bounds3
define_colors	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^macro_rules! define_colors {$/;"	M
delay	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/animation.rs	/^    delay: Ratio<u16>,$/;"	m	struct:Frame
delay	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/animation.rs	/^    pub fn delay(&self) -> Ratio<u16> {$/;"	P	implementation:Frame
delay	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/gif.rs	/^    delay: Ratio<u16>,$/;"	m	struct:GifFrameIterator
delta_values	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^    delta_values: bool,$/;"	m	struct:Segment
depth	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/header.rs	/^    pub depth: u32,$/;"	m	struct:ArbitraryHeader
deref	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    fn deref(&self) -> &<Self as Deref>::Target {$/;"	f
deref_mut	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    fn deref_mut(&mut self) -> &mut <Self as Deref>::Target {$/;"	f
derive_codes_and_sizes	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/entropy.rs	/^fn derive_codes_and_sizes(bits: &[u8]) -> (Vec<u8>, Vec<u16>) {$/;"	f
description	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    fn description(&self) -> &str {$/;"	P	implementation:ImageError
diagonal	/home/go/Documents/Rust/renderer/src/geometry/bounds.rs	/^    pub fn diagonal(&self) -> Vector3<T> {$/;"	f
diff	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dxt.rs	/^fn diff(a: Rgb, b: Rgb) -> i32 {$/;"	f
diffuse	/home/go/Documents/Rust/renderer/src/material.rs	/^    pub diffuse: Spectrum,$/;"	m	struct:Material
diffuse_lighting	/home/go/Documents/Rust/renderer/src/main.rs	/^fn diffuse_lighting(p: Point3f, n: Normal3f, diffuse_color: Spectrum, light: Light) -> Spectrum /;"	f
dimensions	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^    fn dimensions(&self) -> (u64, u64) {$/;"	P	implementation:BMPDecoder
dimensions	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    fn dimensions(&self) -> (u32, u32) {$/;"	f
dimensions	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    pub fn dimensions(&self) -> (u32, u32) {$/;"	f
dimensions	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dxt.rs	/^    fn dimensions(&self) -> (u64, u64) {$/;"	P	implementation:DXTDecoder
dimensions	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dynimage.rs	/^    fn dimensions(&self) -> (u32, u32) {$/;"	P	implementation:DynamicImage
dimensions	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    fn dimensions(&self) -> (u32, u32) {$/;"	f
dimensions	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/gif.rs	/^    fn dimensions(&self) -> (u64, u64) {$/;"	P	implementation:Decoder
dimensions	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_decoder.rs	/^    fn dimensions(&self) -> (u64, u64) {$/;"	P	implementation:HDRAdapter
dimensions	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/ico/decoder.rs	/^    fn dimensions(&self) -> (u64, u64) {$/;"	P	implementation:ICODecoder
dimensions	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^            fn dimensions(&self) -> (u64, u64) {(5, 5)}$/;"	P	implementation:tests::test_load_rect::MockDecoder
dimensions	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    fn dimensions(&self) -> (u32, u32) {$/;"	f
dimensions	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    fn dimensions(&self) -> (u32, u32);$/;"	P	interface:GenericImageView
dimensions	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    fn dimensions(&self) -> (u64, u64);$/;"	P	interface:ImageDecoder
dimensions	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/decoder.rs	/^    fn dimensions(&self) -> (u64, u64) {$/;"	P	implementation:JPEGDecoder
dimensions	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/png.rs	/^    fn dimensions(&self) -> (u64, u64) {$/;"	P	implementation:PNGDecoder
dimensions	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/decoder.rs	/^    fn dimensions(&self) -> (u64, u64) {$/;"	P	implementation:PNMDecoder
dimensions	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/encoder.rs	/^    dimensions: CheckedDimensions<'a>,$/;"	m	struct:CheckedHeaderColor
dimensions	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/tga/decoder.rs	/^    fn dimensions(&self) -> (u64, u64) {$/;"	P	implementation:TGADecoder
dimensions	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/tiff.rs	/^    dimensions: (u32, u32),$/;"	m	struct:TIFFDecoder
dimensions	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/tiff.rs	/^    fn dimensions(&self) -> (u64, u64) {$/;"	P	implementation:TIFFDecoder
dimensions	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/decoder.rs	/^    fn dimensions(&self) -> (u64, u64) {$/;"	P	implementation:WebpDecoder
display_pixel	/home/go/Documents/Rust/renderer/src/geometry/world.rs	/^    fn display_pixel(row: i32, column: i32, pixel_color: &RGBColor);$/;"	f	method:World::render_scene
dispose	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/gif.rs	/^    dispose: DisposalMethod,$/;"	m	struct:GifFrameIterator
distance	/home/go/Documents/Rust/renderer/src/geometry/bounds.rs	/^    pub fn distance(p1: &Point3f, p2: &Point3f) -> f64 {$/;"	P	implementation:Bounds3
dither	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/imageops/colorops.rs	/^pub fn dither<Pix, Map>(image: &mut ImageBuffer<Pix, Vec<u8>>, color_map: &Map)$/;"	f
div	/home/go/Documents/Rust/renderer/src/geometry/normal.rs	/^    fn div(self, rhs: T) -> Normal3<T> {$/;"	P	implementation:Normal3
div	/home/go/Documents/Rust/renderer/src/geometry/point.rs	/^    fn div(self, rhs: T) -> Point3<T> {$/;"	P	implementation:Point3
div	/home/go/Documents/Rust/renderer/src/geometry/vector.rs	/^    fn div(self, rhs: T) -> Vector3<T> {$/;"	P	implementation:Vector3
div_assign	/home/go/Documents/Rust/renderer/src/geometry/normal.rs	/^    fn div_assign(&mut self, rhs: T) {$/;"	P	implementation:Normal3
div_assign	/home/go/Documents/Rust/renderer/src/geometry/point.rs	/^    fn div_assign(&mut self, rhs: T) {$/;"	P	implementation:Point3
div_assign	/home/go/Documents/Rust/renderer/src/geometry/vector.rs	/^    fn div_assign(&mut self, rhs: T) {$/;"	P	implementation:Vector3
do_dithering	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/imageops/colorops.rs	/^macro_rules! do_dithering($/;"	M
dot	/home/go/Documents/Rust/renderer/src/geometry/normal.rs	/^    pub fn dot(self, v: Vector3f) -> f64 {$/;"	P	implementation:Normal3f
dot	/home/go/Documents/Rust/renderer/src/geometry/vector.rs	/^    pub fn dot(self, other: Vector3<T>) -> T {$/;"	f
drop	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/autobreak.rs	/^    fn drop(&mut self) {$/;"	P	implementation:AutoBreak
dxt	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/lib.rs	/^pub mod dxt;$/;"	n
dynamic_map	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dynimage.rs	/^macro_rules! dynamic_map($/;"	M
dynimage	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/lib.rs	/^mod dynimage;$/;"	n
e	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_decoder.rs	/^    pub e: u8,$/;"	m	struct:RGBE8Pixel
edge_pixels	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^fn edge_pixels($/;"	f
enc565_decode	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dxt.rs	/^fn enc565_decode(value: u16) -> Rgb {$/;"	f
enc565_encode	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dxt.rs	/^fn enc565_encode(rgb: Rgb) -> u16 {$/;"	f
encode	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/encoder.rs	/^    pub fn encode($/;"	P	implementation:BMPEncoder
encode	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dxt.rs	/^    pub fn encode($/;"	P	implementation:DXTEncoder
encode	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/gif.rs	/^    pub fn encode(&mut self, frame: &Frame) -> ImageResult<()> {$/;"	P	implementation:Encoder
encode	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_encoder.rs	/^    pub fn encode(mut self, data: &[Rgb<f32>], width: usize, height: usize) -> Result<()> {$/;"	P	implementation:HDREncoder
encode	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/ico/encoder.rs	/^    pub fn encode($/;"	P	implementation:ICOEncoder
encode	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/encoder.rs	/^    pub fn encode($/;"	P	implementation:JPEGEncoder
encode	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/png.rs	/^    pub fn encode(self, data: &[u8], width: u32, height: u32, color: ColorType) -> io::Result<()/;"	P	implementation:PNGEncoder
encode	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/encoder.rs	/^    pub fn encode<'s, S>($/;"	P	implementation:PNMEncoder
encode_coefficient	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/encoder.rs	/^fn encode_coefficient(coefficient: i32) -> (u8, u16) {$/;"	f
encode_dxt1_block	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dxt.rs	/^fn encode_dxt1_block(source: &[u8], dest: &mut [u8]) {$/;"	f
encode_dxt1_row	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dxt.rs	/^fn encode_dxt1_row(source: &[u8]) -> Vec<u8> {$/;"	f
encode_dxt3_block	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dxt.rs	/^fn encode_dxt3_block(source: &[u8], dest: &mut [u8]) {$/;"	f
encode_dxt3_row	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dxt.rs	/^fn encode_dxt3_row(source: &[u8]) -> Vec<u8> {$/;"	f
encode_dxt5_block	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dxt.rs	/^fn encode_dxt5_block(source: &[u8], dest: &mut [u8]) {$/;"	f
encode_dxt5_row	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dxt.rs	/^fn encode_dxt5_row(source: &[u8]) -> Vec<u8> {$/;"	f
encode_dxt_colors	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dxt.rs	/^fn encode_dxt_colors(source: &[u8], dest: &mut [u8]) {$/;"	f
encode_frames	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/gif.rs	/^    pub fn encode_frames<F>(&mut self, frames: F) -> ImageResult<()>$/;"	P	implementation:Encoder
encode_gray	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/encoder.rs	/^    fn encode_gray($/;"	P	implementation:BMPEncoder
encode_gray	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/encoder.rs	/^    fn encode_gray($/;"	P	implementation:JPEGEncoder
encode_rgb	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/encoder.rs	/^    fn encode_rgb($/;"	P	implementation:BMPEncoder
encode_rgb	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/encoder.rs	/^    fn encode_rgb($/;"	P	implementation:JPEGEncoder
encode_single_frame	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/gif.rs	/^    fn encode_single_frame(&mut self, img_frame: animation::Frame) -> ImageResult<()> {$/;"	P	implementation:Encoder
encoded_bytes_per_block	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dxt.rs	/^    fn encoded_bytes_per_block(self) -> usize {$/;"	P	implementation:DXTVariant
encoder	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/mod.rs	/^mod encoder;$/;"	n
encoder	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/ico/mod.rs	/^mod encoder;$/;"	n
encoder	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/mod.rs	/^mod encoder;$/;"	n
encoder	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/mod.rs	/^mod encoder;$/;"	n
encoding	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/encoder.rs	/^    encoding: TupleEncoding<'a>,$/;"	m	struct:CheckedHeader
encoding	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/header.rs	/^    pub encoding: SampleEncoding,$/;"	m	struct:BitmapHeader
encoding	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/header.rs	/^    pub encoding: SampleEncoding,$/;"	m	struct:GraymapHeader
encoding	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/header.rs	/^    pub encoding: SampleEncoding,$/;"	m	struct:PixmapHeader
encoding_for	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/encoder.rs	/^    fn encoding_for(&self, header: &HeaderRecord) -> TupleEncoding<'a> {$/;"	P	implementation:FlatSamples
entropy	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/mod.rs	/^mod entropy;$/;"	n
entry_size	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/tga/decoder.rs	/^    entry_size: usize,$/;"	m	struct:ColorMap
enumerate_pixels	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    pub fn enumerate_pixels(&self) -> EnumeratePixels<P> {$/;"	f
enumerate_pixels_mut	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    pub fn enumerate_pixels_mut(&mut self) -> EnumeratePixelsMut<P> {$/;"	f
error_encountered	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_decoder.rs	/^    error_encountered: bool,$/;"	m	struct:HDRImageDecoderIterator
execute_roundtrip_default	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/mod.rs	/^    fn execute_roundtrip_default(buffer: &[u8], width: u32, height: u32, color: ColorType) {$/;"	f	module:tests
execute_roundtrip_u16	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/mod.rs	/^    fn execute_roundtrip_u16(buffer: &[u16], width: u32, height: u32, color: ColorType) {$/;"	f	module:tests
execute_roundtrip_with_subtype	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/mod.rs	/^    fn execute_roundtrip_with_subtype($/;"	f	module:tests
expand_color_map	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/tga/decoder.rs	/^    fn expand_color_map(&self, pixel_data: &[u8]) -> Vec<u8> {$/;"	P	implementation:TGADecoder
expand_packed	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/utils/mod.rs	/^pub fn expand_packed<F>(buf: &mut [u8], channels: usize, bit_depth: u8, mut func: F)$/;"	f
expand_palette	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    pub fn expand_palette($/;"	P	implementation:GrayImage
exposure	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_decoder.rs	/^    pub exposure: Option<f32>,$/;"	m	struct:HDRMetadata
extend_buffer	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^fn extend_buffer(buffer: &mut Vec<u8>, full_size: usize, blank: bool) -> &mut [u8] {$/;"	f
extents	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    pub fn extents(&self) -> (usize, usize, usize) {$/;"	P	implementation:FlatSamples
extents	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    pub fn extents(&self) -> (usize, usize, usize) {$/;"	P	implementation:SampleLayout
f32	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/traits.rs	/^impl Primitive for f32 {}$/;"	c
f64	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/traits.rs	/^impl Primitive for f64 {}$/;"	c
f64	/home/go/Documents/Rust/renderer/src/geometry/point.rs	/^impl Mul<Point3f> for f64 {$/;"	c
fdct	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/transform.rs	/^pub fn fdct(samples: &[u8], coeffs: &mut [i32]) {$/;"	f
filter	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^    filter: u8,$/;"	m	struct:Frame
filter3x3	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dynimage.rs	/^    pub fn filter3x3(&self, kernel: &[f32]) -> DynamicImage {$/;"	P	implementation:DynamicImage
filter3x3	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/imageops/sample.rs	/^pub fn filter3x3<I, P, S>(image: &I, kernel: &[f32]) -> ImageBuffer<P, Vec<S>>$/;"	f
filter_level	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^    filter_level: u8,$/;"	m	struct:Frame
fits	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    pub fn fits(&self, len: usize) -> bool {$/;"	P	implementation:FlatSamples
fits	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    pub fn fits(&self, len: usize) -> bool {$/;"	P	implementation:SampleLayout
flat	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    pub fn flat(&self) -> &FlatSamples<Buffer> {$/;"	f
flat	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/lib.rs	/^pub mod flat;$/;"	n
flip_horizontal	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/imageops/affine.rs	/^pub fn flip_horizontal<I: GenericImageView + 'static>($/;"	f
flip_vertical	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/imageops/affine.rs	/^pub fn flip_vertical<I: GenericImageView + 'static>($/;"	f
flip_vertically	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/tga/decoder.rs	/^    fn flip_vertically(&mut self, pixels: &mut [u8]) {$/;"	P	implementation:TGADecoder
fliph	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dynimage.rs	/^    pub fn fliph(&self) -> DynamicImage {$/;"	P	implementation:DynamicImage
flipv	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dynimage.rs	/^    pub fn flipv(&self) -> DynamicImage {$/;"	P	implementation:DynamicImage
flush	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/autobreak.rs	/^    fn flush(&mut self) -> io::Result<()> {$/;"	P	implementation:AutoBreak
flush_buf	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/autobreak.rs	/^    fn flush_buf(&mut self) -> io::Result<()> {$/;"	P	implementation:AutoBreak
fmt	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    fn fmt(&self, fmt: &mut fmt::Formatter) -> Result<(), fmt::Error> {$/;"	P	implementation:ImageError
for_display	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^    pub for_display: bool,$/;"	m	struct:Frame
frame	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/decoder.rs	/^    frame: Frame,$/;"	m	struct:WebpDecoder
frame	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^    frame: Frame,$/;"	m	struct:VP8Decoder
freq	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/math/nq.rs	/^    freq: Vec<f64>,$/;"	m	struct:NeuQuant
from	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    fn from(error: Error) -> ImageError {$/;"	P	implementation:ImageError
from	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/gif.rs	/^    fn from(err: gif::DecodingError) -> ImageError {$/;"	P	implementation:ImageError
from	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    fn from(err: io::Error) -> ImageError {$/;"	P	implementation:ImageError
from	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    fn from(fmt: ImageFormat) -> Self {$/;"	P	implementation:ImageOutputFormat
from	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/decoder.rs	/^    fn from(err: jpeg_decoder::Error) -> ImageError {$/;"	P	implementation:ImageError
from	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/decoder.rs	/^    fn from(pixel_format: jpeg_decoder::PixelFormat) -> ColorType {$/;"	P	implementation:ColorType
from	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/png.rs	/^    fn from((ct, bits): (png::ColorType, png::BitDepth)) -> ColorType {$/;"	P	implementation:ColorType
from	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/png.rs	/^    fn from(ct: ColorType) -> (png::ColorType, png::BitDepth) {$/;"	P	implementation:BitDepth
from	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/png.rs	/^    fn from(err: png::DecodingError) -> ImageError {$/;"	P	implementation:ImageError
from	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/encoder.rs	/^    fn from(samples: &'a [u16]) -> Self {$/;"	P	implementation:FlatSamples
from	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/encoder.rs	/^    fn from(samples: &'a [u8]) -> Self {$/;"	P	implementation:FlatSamples
from	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/header.rs	/^    fn from(header: ArbitraryHeader) -> Self {$/;"	P	implementation:PNMHeader
from	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/header.rs	/^    fn from(header: BitmapHeader) -> Self {$/;"	P	implementation:PNMHeader
from	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/header.rs	/^    fn from(header: GraymapHeader) -> Self {$/;"	P	implementation:PNMHeader
from	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/header.rs	/^    fn from(header: PixmapHeader) -> Self {$/;"	P	implementation:PNMHeader
from	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/tiff.rs	/^    fn from(ct: tiff::ColorType) -> ColorType {$/;"	P	implementation:ColorType
from	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/tiff.rs	/^    fn from(err: tiff::TiffError) -> ImageError {$/;"	P	implementation:ImageError
from	/home/go/Documents/Rust/renderer/src/geometry/normal.rs	/^    fn from(v: Vector3<T>) -> Self {$/;"	P	implementation:Normal3
from	/home/go/Documents/Rust/renderer/src/geometry/vector.rs	/^    fn from(n: Normal3<T>) -> Self {$/;"	P	implementation:Vector3
from	/home/go/Documents/Rust/renderer/src/geometry/vector.rs	/^    fn from(n: Point3<T>) -> Self {$/;"	P	implementation:Vector3
from_ascii	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/decoder.rs	/^    fn from_ascii($/;"	P	implementation:BWBit
from_ascii	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/decoder.rs	/^    fn from_ascii($/;"	P	implementation:PbmBit
from_ascii	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/decoder.rs	/^    fn from_ascii($/;"	P	implementation:U16
from_ascii	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/decoder.rs	/^    fn from_ascii($/;"	P	implementation:U8
from_ascii	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/decoder.rs	/^    fn from_ascii(reader: &mut Read, width: u32, height: u32, samples: u32)$/;"	P	interface:Sample
from_bytes	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/decoder.rs	/^    fn from_bytes($/;"	P	implementation:BWBit
from_bytes	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/decoder.rs	/^    fn from_bytes($/;"	P	implementation:PbmBit
from_bytes	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/decoder.rs	/^    fn from_bytes($/;"	P	implementation:U16
from_bytes	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/decoder.rs	/^    fn from_bytes($/;"	P	implementation:U8
from_bytes	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/decoder.rs	/^    fn from_bytes(bytes: &[u8], width: u32, height: u32, samples: u32)$/;"	P	interface:Sample
from_channels	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    fn from_channels($/;"	P	interface:Pixel
from_color	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^    fn from_color(&mut self, &Other);$/;"	P	interface:FromColor
from_color	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^    fn from_color(&mut self, gray: &Luma<T>) {$/;"	P	implementation:Bgr
from_color	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^    fn from_color(&mut self, gray: &Luma<T>) {$/;"	P	implementation:Bgra
from_color	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^    fn from_color(&mut self, gray: &Luma<T>) {$/;"	P	implementation:Rgb
from_color	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^    fn from_color(&mut self, gray: &Luma<T>) {$/;"	P	implementation:Rgba
from_color	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^    fn from_color(&mut self, other: &A) {$/;"	P	implementation:A
from_color	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^    fn from_color(&mut self, other: &Bgr<T>) {$/;"	P	implementation:Bgra
from_color	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^    fn from_color(&mut self, other: &Bgr<T>) {$/;"	P	implementation:Luma
from_color	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^    fn from_color(&mut self, other: &Bgr<T>) {$/;"	P	implementation:LumaA
from_color	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^    fn from_color(&mut self, other: &Bgr<T>) {$/;"	P	implementation:Rgb
from_color	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^    fn from_color(&mut self, other: &Bgr<T>) {$/;"	P	implementation:Rgba
from_color	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^    fn from_color(&mut self, other: &Bgra<T>) {$/;"	P	implementation:Bgr
from_color	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^    fn from_color(&mut self, other: &Bgra<T>) {$/;"	P	implementation:Luma
from_color	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^    fn from_color(&mut self, other: &Bgra<T>) {$/;"	P	implementation:LumaA
from_color	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^    fn from_color(&mut self, other: &Bgra<T>) {$/;"	P	implementation:Rgb
from_color	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^    fn from_color(&mut self, other: &Bgra<T>) {$/;"	P	implementation:Rgba
from_color	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^    fn from_color(&mut self, other: &Luma<T>) {$/;"	P	implementation:LumaA
from_color	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^    fn from_color(&mut self, other: &LumaA<T>) {$/;"	P	implementation:Bgr
from_color	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^    fn from_color(&mut self, other: &LumaA<T>) {$/;"	P	implementation:Bgra
from_color	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^    fn from_color(&mut self, other: &LumaA<T>) {$/;"	P	implementation:Luma
from_color	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^    fn from_color(&mut self, other: &LumaA<T>) {$/;"	P	implementation:Rgb
from_color	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^    fn from_color(&mut self, other: &LumaA<T>) {$/;"	P	implementation:Rgba
from_color	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^    fn from_color(&mut self, other: &Rgb<T>) {$/;"	P	implementation:Bgr
from_color	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^    fn from_color(&mut self, other: &Rgb<T>) {$/;"	P	implementation:Bgra
from_color	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^    fn from_color(&mut self, other: &Rgb<T>) {$/;"	P	implementation:Luma
from_color	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^    fn from_color(&mut self, other: &Rgb<T>) {$/;"	P	implementation:LumaA
from_color	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^    fn from_color(&mut self, other: &Rgb<T>) {$/;"	P	implementation:Rgba
from_color	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^    fn from_color(&mut self, other: &Rgba<T>) {$/;"	P	implementation:Bgr
from_color	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^    fn from_color(&mut self, other: &Rgba<T>) {$/;"	P	implementation:Bgra
from_color	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^    fn from_color(&mut self, other: &Rgba<T>) {$/;"	P	implementation:Luma
from_color	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^    fn from_color(&mut self, other: &Rgba<T>) {$/;"	P	implementation:LumaA
from_color	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^    fn from_color(&mut self, other: &Rgba<T>) {$/;"	P	implementation:Rgb
from_fn	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    pub fn from_fn<F>(width: u32, height: u32, mut f: F) -> ImageBuffer<P, Vec<P::Subpixel>>$/;"	f
from_mask	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^    fn from_mask($/;"	P	implementation:Bitfields
from_mask	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^    fn from_mask(mask: u32, max_len: u32) -> ImageResult<Bitfield> {$/;"	P	implementation:Bitfield
from_parts	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/animation.rs	/^    pub fn from_parts(buffer: RgbaImage, left: u32, top: u32, delay: Ratio<u16>) -> Frame {$/;"	P	implementation:Frame
from_pixel	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    pub fn from_pixel(width: u32, height: u32, pixel: P) -> ImageBuffer<P, Vec<P::Subpixel>> {$/;"	f
from_raw	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    pub fn from_raw(width: u32, height: u32, buf: Container) -> Option<ImageBuffer<P, Container>/;"	f
from_reader	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/tga/decoder.rs	/^    fn from_reader(r: &mut Read) -> ImageResult<Header> {$/;"	P	implementation:Header
from_reader	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/tga/decoder.rs	/^    pub fn from_reader($/;"	P	implementation:ColorMap
from_slice	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    fn from_slice(slice: &[Self::Subpixel]) -> &Self;$/;"	P	interface:Pixel
from_slice_mut	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    fn from_slice_mut(slice: &mut [Self::Subpixel]) -> &mut Self;$/;"	P	interface:Pixel
from_vec	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    pub fn from_vec($/;"	f
g	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^    g: Bitfield,$/;"	m	struct:Bitfields
g	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/math/nq.rs	/^    g: T,$/;"	m	struct:Quad
g	/home/go/Documents/Rust/renderer/src/spectrum.rs	/^    pub g: f64,$/;"	m	struct:Spectrum
gamma	/home/go/Documents/Rust/renderer/src/geometry/world.rs	/^    gamma: f64,$/;"	m	struct:World::ViewPlane
gaussian	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/imageops/sample.rs	/^pub fn gaussian(x: f32, r: f32) -> f32 {$/;"	f
gaussian_kernel	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/imageops/sample.rs	/^pub fn gaussian_kernel(x: f32) -> f32 {$/;"	f
geometry	/home/go/Documents/Rust/renderer/src/lib.rs	/^pub mod geometry;$/;"	n
get	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/tga/decoder.rs	/^    pub fn get(&self, index: usize) -> &[u8] {$/;"	P	implementation:ColorMap
get_mut_sample	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    pub fn get_mut_sample(&mut self, channel: u8, x: u32, y: u32) -> Option<&mut P::Subpixel> $/;"	f
get_mut_sample	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    pub fn get_mut_sample(&mut self, channel: u8, x: u32, y: u32) -> Option<&mut P::Subpixel> {$/;"	f
get_mut_sample	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    pub fn get_mut_sample<T>(&mut self, channel: u8, x: u32, y: u32) -> Option<&mut T>$/;"	P	implementation:FlatSamples
get_palette_size	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^    fn get_palette_size(&mut self) -> ImageResult<usize> {$/;"	P	implementation:BMPDecoder
get_pixel	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    fn get_pixel(&self, x: u32, y: u32) -> P {$/;"	f
get_pixel	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    pub fn get_pixel(&self, x: u32, y: u32) -> &P {$/;"	f
get_pixel	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dynimage.rs	/^    fn get_pixel(&self, x: u32, y: u32) -> color::Rgba<u8> {$/;"	P	implementation:DynamicImage
get_pixel	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    fn get_pixel(&self, x: u32, y: u32) -> Self::Pixel {$/;"	f
get_pixel	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    fn get_pixel(&self, x: u32, y: u32) -> Self::Pixel {$/;"	f
get_pixel	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    fn get_pixel(&self, x: u32, y: u32) -> Self::Pixel;$/;"	P	interface:GenericImageView
get_pixel_info	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/encoder.rs	/^fn get_pixel_info(c: color::ColorType) -> io::Result<(u32, u32, u32)> {$/;"	f
get_pixel_mut	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    fn get_pixel_mut(&mut self, x: u32, y: u32) -> &mut P {$/;"	f
get_pixel_mut	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    pub fn get_pixel_mut(&mut self, x: u32, y: u32) -> &mut P {$/;"	f
get_pixel_mut	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dynimage.rs	/^    fn get_pixel_mut(&mut self, _: u32, _: u32) -> &mut color::Rgba<u8> {$/;"	P	implementation:DynamicImage
get_pixel_mut	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    fn get_pixel_mut(&mut self, x: u32, y: u32) -> &mut Self::Pixel {$/;"	f
get_pixel_mut	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    fn get_pixel_mut(&mut self, x: u32, y: u32) -> &mut Self::Pixel {$/;"	f
get_pixel_mut	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    fn get_pixel_mut(&mut self, x: u32, y: u32) -> &mut Self::Pixel;$/;"	P	interface:GenericImage
get_sample	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    pub fn get_sample(&self, channel: u8, x: u32, y: u32) -> Option<&P::Subpixel> {$/;"	f
get_sample	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    pub fn get_sample(&self, channel: u8, x: u32, y: u32) -> Option<&P::Subpixel>$/;"	f
get_sample	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    pub fn get_sample<T>(&self, channel: u8, x: u32, y: u32) -> Option<&T>$/;"	P	implementation:FlatSamples
get_unsupported_error_message	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/encoder.rs	/^fn get_unsupported_error_message(c: color::ColorType) -> String {$/;"	f
gif	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/lib.rs	/^pub mod gif;$/;"	n
gif_encoder	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/gif.rs	/^    gif_encoder: Option<gif::Encoder<W>>,$/;"	m	struct:Encoder
gray_to_luma8	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dynimage.rs	/^fn gray_to_luma8(bit_depth: u8, w: u32, h: u32, buf: &[u8]) -> Option<GrayImage> {$/;"	f
gray_to_luma8_skip	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dynimage.rs	/^    fn gray_to_luma8_skip() {$/;"	f	module:test
grayscale	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dynimage.rs	/^    pub fn grayscale(&self) -> DynamicImage {$/;"	P	implementation:DynamicImage
grayscale	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/imageops/colorops.rs	/^pub fn grayscale<I: GenericImageView>($/;"	f
grayscale_roundtrip_sanity_check	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/encoder.rs	/^    fn grayscale_roundtrip_sanity_check() {$/;"	f	module:tests
guess_format	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dynimage.rs	/^pub fn guess_format(buffer: &[u8]) -> ImageResult<ImageFormat> {$/;"	f
h	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/encoder.rs	/^    h: u8,$/;"	m	struct:Component
has_aliased_samples	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    pub fn has_aliased_samples(&self) -> bool {$/;"	P	implementation:FlatSamples
has_aliased_samples	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    pub fn has_aliased_samples(&self) -> bool {$/;"	P	implementation:SampleLayout
has_loaded_metadata	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^    has_loaded_metadata: bool,$/;"	m	struct:BMPDecoder
has_loaded_metadata	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/tga/decoder.rs	/^    has_loaded_metadata: bool,$/;"	m	struct:TGADecoder
has_newline	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/autobreak.rs	/^    has_newline: bool,$/;"	m	struct:AutoBreak
have_frame	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/decoder.rs	/^    have_frame: bool,$/;"	m	struct:WebpDecoder
hdr	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/lib.rs	/^pub mod hdr;$/;"	n
hdr_decoder	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/mod.rs	/^mod hdr_decoder;$/;"	n
hdr_encoder	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/mod.rs	/^mod hdr_encoder;$/;"	n
header	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/decoder.rs	/^    header: PNMHeader,$/;"	m	struct:PNMDecoder
header	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/encoder.rs	/^    fn header(&self) -> &PNMHeader {$/;"	P	implementation:CheckedHeader
header	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/encoder.rs	/^    header: &'a PNMHeader,$/;"	m	struct:UncheckedHeader
header	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/encoder.rs	/^    header: HeaderStrategy,$/;"	m	struct:PNMEncoder
header	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/mod.rs	/^mod header;$/;"	n
header	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/tga/decoder.rs	/^    header: Header,$/;"	m	struct:TGADecoder
height	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^    height: i32,$/;"	m	struct:BMPDecoder
height	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    height: u32,$/;"	m	struct:ImageBuffer
height	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    pub fn height(&self) -> u32 {$/;"	f
height	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    pub height: u32,$/;"	m	struct:SampleLayout
height	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/gif.rs	/^    height: u32,$/;"	m	struct:GifFrameIterator
height	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_decoder.rs	/^    height: u32,$/;"	m	struct:HDRDecoder
height	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_decoder.rs	/^    pub height: u32,$/;"	m	struct:HDRMetadata
height	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/ico/decoder.rs	/^    height: u8,$/;"	m	struct:DirEntry
height	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    fn height(&self) -> u32 {$/;"	P	interface:GenericImageView
height	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    height: u32,$/;"	m	struct:MutPixels
height	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    height: u32,$/;"	m	struct:Pixels
height	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/encoder.rs	/^    height: u32,$/;"	m	struct:CheckedDimensions
height	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/header.rs	/^    pub fn height(&self) -> u32 {$/;"	P	implementation:PNMHeader
height	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/header.rs	/^    pub height: u32,$/;"	m	struct:ArbitraryHeader
height	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/header.rs	/^    pub height: u32,$/;"	m	struct:BitmapHeader
height	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/header.rs	/^    pub height: u32,$/;"	m	struct:GraymapHeader
height	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/header.rs	/^    pub height: u32,$/;"	m	struct:PixmapHeader
height	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/tga/decoder.rs	/^    height: usize,$/;"	m	struct:TGADecoder
height	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^    pub height: u16,$/;"	m	struct:Frame
height_blocks	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dxt.rs	/^    height_blocks: u32,$/;"	m	struct:DXTDecoder
height_stride	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    pub height_stride: usize,$/;"	m	struct:SampleLayout
hit	/home/go/Documents/Rust/renderer/src/geometry/object.rs	/^    fn hit(&self, ray: &Ray, tmin: &mut f64, sr: &mut ShadeRec) -> bool {$/;"	P	implementation:Plane
hit	/home/go/Documents/Rust/renderer/src/geometry/object.rs	/^    fn hit(&self, ray: &Ray, tmin: &mut f64, sr: &mut ShadeRec) -> bool {$/;"	P	implementation:Sphere
hit	/home/go/Documents/Rust/renderer/src/geometry/ray.rs	/^    fn hit(&self, ray: &Ray, tmin: &mut f64, sr: &mut ShadeRec) -> bool;$/;"	P	interface:Hit
hit_an_object	/home/go/Documents/Rust/renderer/src/geometry/ray.rs	/^    pub hit_an_object: bool,$/;"	m	struct:ShadeRec
horizontal_sample	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/imageops/sample.rs	/^fn horizontal_sample<I, P, S>($/;"	f
hres	/home/go/Documents/Rust/renderer/src/geometry/world.rs	/^    hres: i32,$/;"	m	struct:World::ViewPlane
huerotate	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dynimage.rs	/^    pub fn huerotate(&self, value: i32) -> DynamicImage {$/;"	P	implementation:DynamicImage
huerotate	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/imageops/colorops.rs	/^pub fn huerotate<I, P, S>(image: &I, value: i32) -> ImageBuffer<P, Vec<S>>$/;"	f
huffman_encode	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/encoder.rs	/^    fn huffman_encode(&mut self, val: u8, table: &[(u8, u16)]) -> io::Result<()> {$/;"	P	implementation:BitWriter
i16	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/traits.rs	/^impl Primitive for i16 {}$/;"	c
i32	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/traits.rs	/^impl Primitive for i32 {}$/;"	c
i64	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/traits.rs	/^impl Primitive for i64 {}$/;"	c
i8	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/traits.rs	/^impl Primitive for i8 {}$/;"	c
ico	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/lib.rs	/^pub mod ico;$/;"	n
id	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/encoder.rs	/^    id: u8,$/;"	m	struct:Component
id_length	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/tga/decoder.rs	/^    id_length: u8,      \/\/ length of ID string$/;"	m	struct:Header
idct4x4	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/transform.rs	/^pub fn idct4x4(block: &mut [i32]) {$/;"	f
image	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    image: &'a I,$/;"	m	struct:Pixels
image	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    image: &'a mut I,$/;"	m	struct:MutPixels
image	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    image: I,$/;"	m	struct:SubImage
image	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/lib.rs	/^mod image;$/;"	n
image_buffer_conversion	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    fn image_buffer_conversion() {$/;"	f	module:tests
image_buffer_len	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    fn image_buffer_len(width: u32, height: u32) -> Option<usize> {$/;"	f
image_desc	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/tga/decoder.rs	/^    image_desc: u8,     \/\/ image descriptor$/;"	m	struct:Header
image_height	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/tga/decoder.rs	/^    image_height: u16,  \/\/ height of image$/;"	m	struct:Header
image_length	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/ico/decoder.rs	/^    image_length: u32,$/;"	m	struct:DirEntry
image_mut_slice	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    pub fn image_mut_slice(&mut self) -> &mut [P::Subpixel] $/;"	f
image_mut_slice	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    pub fn image_mut_slice(&mut self) -> &mut [P::Subpixel] {$/;"	f
image_mut_slice	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    pub fn image_mut_slice<T>(&mut self) -> Option<&mut [T]> where Buffer: AsMut<[T]> {$/;"	P	implementation:FlatSamples
image_offset	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/ico/decoder.rs	/^    image_offset: u32,$/;"	m	struct:DirEntry
image_slice	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    pub fn image_slice(&self) -> &[P::Subpixel] where Buffer: AsRef<[P::Subpixel]> {$/;"	f
image_slice	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    pub fn image_slice(&self) -> &[P::Subpixel] {$/;"	f
image_slice	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    pub fn image_slice<T>(&self) -> Option<&[T]> where Buffer: AsRef<[T]> {$/;"	P	implementation:FlatSamples
image_to_bytes	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dynimage.rs	/^fn image_to_bytes(image: &DynamicImage) -> Vec<u8> {$/;"	f
image_type	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^    image_type: ImageType,$/;"	m	struct:BMPDecoder
image_type	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^    image_type: ImageType,$/;"	m	struct:RLEInsnIterator
image_type	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/tga/decoder.rs	/^    image_type: ImageType,$/;"	m	struct:TGADecoder
image_type	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/tga/decoder.rs	/^    image_type: u8,     \/\/ image type code$/;"	m	struct:Header
image_width	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/tga/decoder.rs	/^    image_width: u16,   \/\/ width of image$/;"	m	struct:Header
imageops	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/lib.rs	/^pub mod imageops;$/;"	n
in_bounds	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    fn in_bounds(&self, x: u32, y: u32) -> bool {$/;"	f
in_bounds	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    pub fn in_bounds(&self, channel: u8, x: u32, y: u32) -> bool {$/;"	P	implementation:FlatSamples
in_bounds	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    pub fn in_bounds(&self, channel: u8, x: u32, y: u32) -> bool {$/;"	P	implementation:SampleLayout
in_bounds	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    fn in_bounds(&self, x: u32, y: u32) -> bool {$/;"	P	interface:GenericImageView
in_bounds_index	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    pub fn in_bounds_index(&self, c: u8, x: u32, y: u32) -> usize {$/;"	P	implementation:SampleLayout
in_bounds_index	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    pub fn in_bounds_index(&self, channel: u8, x: u32, y: u32) -> usize {$/;"	P	implementation:FlatSamples
increasing_stride_dims	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    fn increasing_stride_dims(&self) -> [Dim; 3] {$/;"	P	implementation:SampleLayout
index	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    fn index(&self, (x, y): (u32, u32)) -> &P {$/;"	f
index	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    fn index(&self, (c, x, y): (u8, u32, u32)) -> &Self::Output {$/;"	f
index	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    pub fn index(&self, channel: u8, x: u32, y: u32) -> Option<usize> {$/;"	P	implementation:FlatSamples
index	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    pub fn index(&self, channel: u8, x: u32, y: u32) -> Option<usize> {$/;"	P	implementation:SampleLayout
index	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^    index: usize,$/;"	m	struct:BoolReader
index	/home/go/Documents/Rust/renderer/src/geometry/bounds.rs	/^    fn index(&self, i: u32) -> &Point3<T> {$/;"	P	implementation:Bounds3
index	/home/go/Documents/Rust/renderer/src/geometry/normal.rs	/^    fn index(&self, i: u32) -> &T {$/;"	P	implementation:Normal3
index	/home/go/Documents/Rust/renderer/src/geometry/point.rs	/^    fn index(&self, i: u32) -> &T {$/;"	P	implementation:Point3
index	/home/go/Documents/Rust/renderer/src/geometry/vector.rs	/^    fn index(&self, i: u32) -> &T {$/;"	P	implementation:Vector3
index_colors	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/imageops/colorops.rs	/^pub fn index_colors<Pix, Map>($/;"	f
index_ignoring_bounds	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    pub fn index_ignoring_bounds(&self, channel: usize, x: usize, y: usize) -> Option<usize> {$/;"	P	implementation:FlatSamples
index_ignoring_bounds	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    pub fn index_ignoring_bounds(&self, channel: usize, x: usize, y: usize) -> Option<usize> {$/;"	P	implementation:SampleLayout
index_mut	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    fn index_mut(&mut self, (x, y): (u32, u32)) -> &mut P {$/;"	f
index_mut	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    fn index_mut(&mut self, (c, x, y): (u8, u32, u32)) -> &mut Self::Output {$/;"	f
index_of	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/imageops/colorops.rs	/^    fn index_of(&self, color: &Luma<u8>) -> usize {$/;"	P	implementation:BiLevel
index_of	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/imageops/colorops.rs	/^    fn index_of(&self, color: &Rgba<u8>) -> usize {$/;"	P	implementation:NeuQuant
index_of	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/imageops/colorops.rs	/^    fn index_of(&self, color: &Self::Color) -> usize;$/;"	P	interface:ColorMap
index_of	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/math/nq.rs	/^    pub fn index_of(&self, pixel: &[u8]) -> usize {$/;"	P	implementation:NeuQuant
init	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/math/nq.rs	/^    pub fn init(&mut self, pixels: &[u8]) {$/;"	P	implementation:NeuQuant
init	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^    pub fn init(&mut self, buf: Vec<u8>) {$/;"	P	implementation:BoolReader
init_partitions	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^    fn init_partitions(&mut self, n: usize) -> io::Result<()> {$/;"	P	implementation:VP8Decoder
init_top_macroblocks	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^fn init_top_macroblocks(width: usize) -> Vec<MacroBlock> {$/;"	f
inner	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    fn inner(&self) -> &Self::InnerImageView {$/;"	f
inner	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dxt.rs	/^    inner: R,$/;"	m	struct:DXTDecoder
inner	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dynimage.rs	/^    fn inner(&self) -> &Self::InnerImageView {$/;"	P	implementation:DynamicImage
inner	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    fn inner(&self) -> &Self {$/;"	f
inner	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    inner: FlatSamples<Buffer>,$/;"	m	struct:View
inner	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    inner: FlatSamples<Buffer>,$/;"	m	struct:ViewMut
inner	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_decoder.rs	/^    inner: Option<HDRDecoder<R>>,$/;"	m	struct:HDRAdapter
inner	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    fn inner(&self) -> &Self::InnerImageView {$/;"	f
inner	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    fn inner(&self) -> &Self::InnerImageView;$/;"	P	interface:GenericImageView
inner	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/tiff.rs	/^    inner: tiff::decoder::Decoder<R>,$/;"	m	struct:TIFFDecoder
inner_decoder	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/ico/decoder.rs	/^    inner_decoder: InnerDecoder<R>,$/;"	m	struct:ICODecoder
inner_mut	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    fn inner_mut(&mut self) -> &mut Self::InnerImage {$/;"	f
inner_mut	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dynimage.rs	/^    fn inner_mut(&mut self) -> &mut Self::InnerImage {$/;"	P	implementation:DynamicImage
inner_mut	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    fn inner_mut(&mut self) -> &mut Self {$/;"	f
inner_mut	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    fn inner_mut(&mut self) -> &mut Self::InnerImage {$/;"	f
inner_mut	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    fn inner_mut(&mut self) -> &mut Self::InnerImage;$/;"	P	interface:GenericImage
inside	/home/go/Documents/Rust/renderer/src/geometry/bounds.rs	/^    pub fn inside(p: &Point3<T>, b: &Bounds3<T>) -> bool {$/;"	f
intersect_ray_sphere	/home/go/Documents/Rust/renderer/src/main.rs	/^fn intersect_ray_sphere(ray: &Ray, sphere_center: Point3f, sphere_radius: f64) -> f64 {$/;"	f
into_buffer	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/animation.rs	/^    pub fn into_buffer(self) -> RgbaImage {$/;"	P	implementation:Frame
into_flat_samples	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    pub fn into_flat_samples(self) -> FlatSamples<Container>$/;"	f
into_frames	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/gif.rs	/^    fn into_frames(self) -> animation::Frames<'a> {$/;"	P	implementation:Decoder
into_frames	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    fn into_frames(self) -> Frames<'a>;$/;"	P	interface:AnimationDecoder
into_image_error	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_decoder.rs	/^    fn into_image_error(self, description: &str) -> ImageResult<T> {$/;"	P	implementation:Result
into_image_error	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_decoder.rs	/^    fn into_image_error(self, description: &str) -> ImageResult<T>;$/;"	P	interface:IntoImageError
into_inner	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    pub fn into_inner(self) -> FlatSamples<Buffer> {$/;"	f
into_inner	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/decoder.rs	/^    pub fn into_inner(self) -> (R, PNMHeader) {$/;"	P	implementation:PNMDecoder
into_iter	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_decoder.rs	/^    fn into_iter(self) -> Self::IntoIter {$/;"	P	implementation:HDRDecoder
into_raw	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    pub fn into_raw(self) -> Container {$/;"	f
into_reader	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^    fn into_reader(self) -> ImageResult<Self::Reader> {$/;"	P	implementation:BMPDecoder
into_reader	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dxt.rs	/^    fn into_reader(self) -> ImageResult<Self::Reader> {$/;"	P	implementation:DXTDecoder
into_reader	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/gif.rs	/^    fn into_reader(self) -> ImageResult<Self::Reader> {$/;"	P	implementation:Decoder
into_reader	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_decoder.rs	/^    fn into_reader(self) -> ImageResult<Self::Reader> {$/;"	P	implementation:HDRAdapter
into_reader	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/ico/decoder.rs	/^    fn into_reader(self) -> ImageResult<Self::Reader> {$/;"	P	implementation:ICODecoder
into_reader	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^            fn into_reader(self) -> ImageResult<Self::Reader> {unimplemented!()}$/;"	P	implementation:tests::test_load_rect::MockDecoder
into_reader	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    fn into_reader(self) -> ImageResult<Self::Reader>;$/;"	P	interface:ImageDecoder
into_reader	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/decoder.rs	/^    fn into_reader(self) -> ImageResult<Self::Reader> {$/;"	P	implementation:JPEGDecoder
into_reader	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/png.rs	/^    fn into_reader(self) -> ImageResult<Self::Reader> {$/;"	P	implementation:PNGDecoder
into_reader	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/decoder.rs	/^    fn into_reader(self) -> ImageResult<Self::Reader> {$/;"	P	implementation:PNMDecoder
into_reader	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/tga/decoder.rs	/^    fn into_reader(self) -> ImageResult<Self::Reader> {$/;"	P	implementation:TGADecoder
into_reader	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/tiff.rs	/^    fn into_reader(self) -> ImageResult<Self::Reader> {$/;"	P	implementation:TIFFDecoder
into_reader	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/decoder.rs	/^    fn into_reader(self) -> ImageResult<Self::Reader> {$/;"	P	implementation:WebpDecoder
into_vec	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    pub fn into_vec(self) -> Vec<P::Subpixel> {$/;"	f
intra_predict	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^    fn intra_predict(&mut self, mbx: usize, mby: usize, mb: &MacroBlock, resdata: &[i32]) {$/;"	P	implementation:VP8Decoder
inv_gamma	/home/go/Documents/Rust/renderer/src/geometry/world.rs	/^    inv_gamma: f64,$/;"	m	struct:World::ViewPlane
invert	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    fn invert(&mut self);$/;"	P	interface:Pixel
invert	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^    fn invert(&mut self) {$/;"	P	implementation:Bgr
invert	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^    fn invert(&mut self) {$/;"	P	implementation:Bgra
invert	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^    fn invert(&mut self) {$/;"	P	implementation:Luma
invert	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^    fn invert(&mut self) {$/;"	P	implementation:LumaA
invert	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^    fn invert(&mut self) {$/;"	P	implementation:Rgb
invert	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^    fn invert(&mut self) {$/;"	P	implementation:Rgba
invert	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^    fn invert(&mut self);$/;"	P	interface:Invert
invert	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dynimage.rs	/^    pub fn invert(&mut self) {$/;"	P	implementation:DynamicImage
invert	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/imageops/colorops.rs	/^pub fn invert<I: GenericImage>(image: &mut I) {$/;"	f
is_color	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/tga/decoder.rs	/^    fn is_color(&self) -> bool {$/;"	P	implementation:ImageType
is_color_mapped	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/tga/decoder.rs	/^    fn is_color_mapped(&self) -> bool {$/;"	P	implementation:ImageType
is_encoded	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/tga/decoder.rs	/^    fn is_encoded(&self) -> bool {$/;"	P	implementation:ImageType
is_flipped_vertically	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/tga/decoder.rs	/^    fn is_flipped_vertically(&self) -> bool {$/;"	P	implementation:TGADecoder
is_normal	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    pub fn is_normal(&self, form: NormalForm) -> bool {$/;"	P	implementation:FlatSamples
is_normal	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    pub fn is_normal(&self, form: NormalForm) -> bool {$/;"	P	implementation:SampleLayout
is_png	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/ico/decoder.rs	/^    fn is_png<R: Read + Seek>(&self, r: &mut R) -> ImageResult<bool> {$/;"	P	implementation:DirEntry
isize	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/traits.rs	/^impl Primitive for isize {}$/;"	c
iterator	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/animation.rs	/^    iterator: Box<Iterator<Item = ImageResult<Frame>> + 'a>$/;"	m	struct:Frames
iwht4x4	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/transform.rs	/^pub fn iwht4x4(block: &mut [i32]) {$/;"	f
jpeg	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/lib.rs	/^pub mod jpeg;$/;"	n
kepsilon	/home/go/Documents/Rust/renderer/src/geometry/object.rs	/^    kepsilon: f64,$/;"	m	struct:Plane
kepsilon	/home/go/Documents/Rust/renderer/src/geometry/object.rs	/^    kepsilon: f64,$/;"	m	struct:Sphere
kernel	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/imageops/sample.rs	/^    pub kernel: Box<Fn(f32) -> f32 + 'a>,$/;"	m	struct:Filter
keyframe	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^    pub keyframe: bool,$/;"	m	struct:Frame
lanczos	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/imageops/sample.rs	/^fn lanczos(x: f32, t: f32) -> f32 {$/;"	f
lanczos3_kernel	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/imageops/sample.rs	/^pub fn lanczos3_kernel(x: f32) -> f32 {$/;"	f
layout	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    pub layout: SampleLayout,$/;"	m	struct:FlatSamples
learn	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/math/nq.rs	/^    fn learn(&mut self, pixels: &[u8]) {$/;"	P	implementation:NeuQuant
left	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/animation.rs	/^    left: u32,$/;"	m	struct:Frame
left	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/animation.rs	/^    pub fn left(&self) -> u32 {$/;"	P	implementation:Frame
left	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/gif.rs	/^    left: u32,$/;"	m	struct:GifFrameIterator
left	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^    left: MacroBlock,$/;"	m	struct:VP8Decoder
left_border	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^    left_border: Vec<u8>,$/;"	m	struct:VP8Decoder
left_pixels	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^fn left_pixels(a: &[u8], x0: usize, y0: usize, stride: usize) -> (u8, u8, u8, u8) {$/;"	f
len	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^    len: u32,$/;"	m	struct:Bitfield
len	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    fn len(&self) -> usize {$/;"	f
len	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    fn len(self) -> usize {$/;"	P	implementation:Dim
len	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/encoder.rs	/^    fn len(&self) -> usize {$/;"	P	implementation:FlatSamples
length	/home/go/Documents/Rust/renderer/src/geometry/normal.rs	/^    pub fn length(self) -> f64 {$/;"	P	implementation:Normal3f
length	/home/go/Documents/Rust/renderer/src/geometry/vector.rs	/^    pub fn length(self) -> f64 {$/;"	P	implementation:Vector3f
length_squared	/home/go/Documents/Rust/renderer/src/geometry/normal.rs	/^    pub fn length_squared(self) -> f64 {$/;"	P	implementation:Normal3f
length_squared	/home/go/Documents/Rust/renderer/src/geometry/vector.rs	/^    pub fn length_squared(self) -> f64 {$/;"	P	implementation:Vector3f
lerp	/home/go/Documents/Rust/renderer/src/geometry/point.rs	/^pub fn lerp(t: f64, p0: &Point3f, p1: &Point3f) -> Point3f {$/;"	f
light	/home/go/Documents/Rust/renderer/src/lib.rs	/^pub mod light;$/;"	n
limit_string_len	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_decoder.rs	/^fn limit_string_len(s: &str, len: usize) -> String {$/;"	f
line	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/autobreak.rs	/^    line: Vec<u8>,$/;"	m	struct:AutoBreak
line_capacity	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/autobreak.rs	/^    line_capacity: usize,$/;"	m	struct:AutoBreak
line_read	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/tga/decoder.rs	/^    line_read: Option<usize>,$/;"	m	struct:TGADecoder
line_remain_buff	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/tga/decoder.rs	/^    line_remain_buff: Vec<u8>,$/;"	m	struct:TGADecoder
load	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dynimage.rs	/^pub fn load<R: BufRead + Seek>(r: R, format: ImageFormat) -> ImageResult<DynamicImage> {$/;"	f
load_from_memory	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dynimage.rs	/^pub fn load_from_memory(buffer: &[u8]) -> ImageResult<DynamicImage> {$/;"	f
load_from_memory_with_format	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dynimage.rs	/^pub fn load_from_memory_with_format(buf: &[u8], format: ImageFormat) -> ImageResult<DynamicImage/;"	f
load_rect	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^pub(crate) fn load_rect<D, F, F1, F2>(x: u64, y: u64, width: u64, height: u64, buf: &mut [u8],$/;"	f
local_hit_point	/home/go/Documents/Rust/renderer/src/geometry/ray.rs	/^    pub local_hit_point: Point3f,$/;"	m	struct:ShadeRec
loopfilter_level	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^    loopfilter_level: i8,$/;"	m	struct:Segment
luma_actable	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/encoder.rs	/^    luma_actable: Vec<(u8, u16)>,$/;"	m	struct:JPEGEncoder
luma_dctable	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/encoder.rs	/^    luma_dctable: Vec<(u8, u16)>,$/;"	m	struct:JPEGEncoder
luma_mode	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^    luma_mode: i8,$/;"	m	struct:MacroBlock
magic_constant	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/header.rs	/^    pub fn magic_constant(self) -> &'static [u8; 2] {$/;"	P	implementation:PNMSubtype
main	/home/go/Documents/Rust/renderer/src/main.rs	/^fn main() {$/;"	f
map	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    fn map<F>(&self, f: F) -> Self$/;"	P	interface:Pixel
map2	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    fn map2<F>(&self, other: &Self, f: F) -> Self$/;"	P	interface:Pixel
map_color	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/imageops/colorops.rs	/^    fn map_color(&self, color: &mut Luma<u8>) {$/;"	P	implementation:BiLevel
map_color	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/imageops/colorops.rs	/^    fn map_color(&self, color: &mut Rgba<u8>) {$/;"	P	implementation:NeuQuant
map_color	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/imageops/colorops.rs	/^    fn map_color(&self, color: &mut Self::Color);$/;"	P	interface:ColorMap
map_entry_size	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/tga/decoder.rs	/^    map_entry_size: u8, \/\/ size of map entries in bits$/;"	m	struct:Header
map_length	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/tga/decoder.rs	/^    map_length: u16,    \/\/ length of map$/;"	m	struct:Header
map_origin	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/tga/decoder.rs	/^    map_origin: u16,    \/\/ starting index of map$/;"	m	struct:Header
map_pixel	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/math/nq.rs	/^    pub fn map_pixel(&self, pixel: &mut [u8]) {$/;"	P	implementation:NeuQuant
map_type	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/tga/decoder.rs	/^    map_type: u8,       \/\/ color map type$/;"	m	struct:Header
map_with_alpha	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    fn map_with_alpha<F, G>(&self, f: F, g: G) -> Self$/;"	P	interface:Pixel
matches_dimensions	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/ico/decoder.rs	/^    fn matches_dimensions(&self, width: u64, height: u64) -> bool {$/;"	P	implementation:DirEntry
material	/home/go/Documents/Rust/renderer/src/lib.rs	/^pub mod material;$/;"	n
math	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/lib.rs	/^pub mod math;$/;"	n
max	/home/go/Documents/Rust/renderer/src/geometry/vector.rs	/^    pub fn max(self, other: Vector3f) -> Vector3f {$/;"	P	implementation:Vector3f
max	/home/go/Documents/Rust/renderer/src/spectrum.rs	/^    pub fn max(self, other: Spectrum) -> Spectrum {$/;"	P	implementation:Spectrum
maximal_sample	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/header.rs	/^    pub fn maximal_sample(&self) -> u32 {$/;"	P	implementation:PNMHeader
maximum_extent	/home/go/Documents/Rust/renderer/src/geometry/bounds.rs	/^    pub fn maximum_extent(&self) -> i32 {$/;"	f
maxval	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/header.rs	/^    pub maxval: u32,$/;"	m	struct:ArbitraryHeader
maxval	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/header.rs	/^    pub maxval: u32,$/;"	m	struct:PixmapHeader
maxwhite	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/header.rs	/^    pub maxwhite: u32,$/;"	m	struct:GraymapHeader
mbheight	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^    mbheight: u16,$/;"	m	struct:VP8Decoder
mbwidth	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^    mbwidth: u16,$/;"	m	struct:VP8Decoder
meta	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_decoder.rs	/^    meta: HDRMetadata,$/;"	m	struct:HDRAdapter
meta	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_decoder.rs	/^    meta: HDRMetadata,$/;"	m	struct:HDRDecoder
metadata	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_decoder.rs	/^    pub fn metadata(&self) -> HDRMetadata {$/;"	P	implementation:HDRDecoder
metadata	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/decoder.rs	/^    metadata: jpeg_decoder::ImageInfo,$/;"	m	struct:JPEGDecoder
min	/home/go/Documents/Rust/renderer/src/geometry/vector.rs	/^    pub fn min(self, other: Vector3f) -> Vector3f {$/;"	P	implementation:Vector3f
min	/home/go/Documents/Rust/renderer/src/spectrum.rs	/^    pub fn min(self, other: Spectrum) -> Spectrum {$/;"	P	implementation:Spectrum
min_length	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    pub fn min_length(&self) -> Option<usize> {$/;"	P	implementation:FlatSamples
min_length	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    pub fn min_length(&self) -> Option<usize> {$/;"	P	implementation:SampleLayout
min_length	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    pub fn min_length(&self) -> usize {$/;"	f
mul	/home/go/Documents/Rust/renderer/src/geometry/normal.rs	/^    fn mul(self, rhs: T) -> Normal3<T> {$/;"	P	implementation:Normal3
mul	/home/go/Documents/Rust/renderer/src/geometry/point.rs	/^    fn mul(self, rhs: Point3f) -> Point3f {$/;"	P	implementation:f64
mul	/home/go/Documents/Rust/renderer/src/geometry/point.rs	/^    fn mul(self, rhs: T) -> Point3<T> {$/;"	P	implementation:Point3
mul	/home/go/Documents/Rust/renderer/src/geometry/vector.rs	/^    fn mul(self, other: Vector3<T>) -> Vector3<T> {$/;"	P	implementation:Vector3
mul	/home/go/Documents/Rust/renderer/src/geometry/vector.rs	/^    fn mul(self, rhs: T) -> Vector3<T> {$/;"	P	implementation:Vector3
mul	/home/go/Documents/Rust/renderer/src/spectrum.rs	/^    fn mul(self, other: Spectrum) -> Spectrum {$/;"	P	implementation:Spectrum
mul	/home/go/Documents/Rust/renderer/src/spectrum.rs	/^    fn mul(self, rhs: f64) -> Spectrum {$/;"	P	implementation:Spectrum
mul_assign	/home/go/Documents/Rust/renderer/src/geometry/normal.rs	/^    fn mul_assign(&mut self, rhs: T) {$/;"	P	implementation:Normal3
mul_assign	/home/go/Documents/Rust/renderer/src/geometry/point.rs	/^    fn mul_assign(&mut self, rhs: T) {$/;"	P	implementation:Point3
mul_assign	/home/go/Documents/Rust/renderer/src/geometry/vector.rs	/^    fn mul_assign(&mut self, rhs: T) {$/;"	P	implementation:Vector3
mutable_view	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    fn mutable_view() {$/;"	f	module:tests
nbits	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/encoder.rs	/^    nbits: u8,$/;"	m	struct:BitWriter
netindex	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/math/nq.rs	/^    netindex: Vec<usize>,$/;"	m	struct:NeuQuant
netsize	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/math/nq.rs	/^    netsize: usize,$/;"	m	struct:NeuQuant
network	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/math/nq.rs	/^    network: Vec<Neuron>,$/;"	m	struct:NeuQuant
new	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/animation.rs	/^    pub fn new(buffer: RgbaImage) -> Frame {$/;"	P	implementation:Frame
new	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/animation.rs	/^    pub fn new(iterator: Box<Iterator<Item = ImageResult<Frame>> + 'a>) -> Self {$/;"	P	implementation:Frames
new	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^    pub fn new(r: R) -> ImageResult<BMPDecoder<R>> {$/;"	P	implementation:BMPDecoder
new	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/encoder.rs	/^    pub fn new(w: &'a mut W) -> Self {$/;"	P	implementation:BMPEncoder
new	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    pub fn new(width: u32, height: u32) -> ImageBuffer<P, Vec<P::Subpixel>> {$/;"	f
new	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dxt.rs	/^    pub fn new($/;"	P	implementation:DXTDecoder
new	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dxt.rs	/^    pub fn new(w: W) -> DXTEncoder<W> {$/;"	P	implementation:DXTEncoder
new	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/gif.rs	/^    fn new(decoder: Decoder<R>) -> GifFrameIterator<R> {$/;"	P	implementation:GifFrameIterator
new	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/gif.rs	/^    pub fn new(r: R) -> ImageResult<Decoder<R>> {$/;"	P	implementation:Decoder
new	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/gif.rs	/^    pub fn new(w: W) -> Encoder<W> {$/;"	P	implementation:Encoder
new	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_decoder.rs	/^    fn new() -> HDRMetadata {$/;"	P	implementation:HDRMetadata
new	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_decoder.rs	/^    pub fn new(r: R) -> ImageResult<HDRAdapter<R>> {$/;"	P	implementation:HDRAdapter
new	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_decoder.rs	/^    pub fn new(reader: R) -> ImageResult<HDRDecoder<R>> {$/;"	P	implementation:HDRDecoder
new	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_encoder.rs	/^    fn new(data: &'a [u8]) -> NorunCombineIterator<'a> {$/;"	P	implementation:NorunCombineIterator
new	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_encoder.rs	/^    fn new(data: &'a [u8]) -> RunIterator<'a> {$/;"	P	implementation:RunIterator
new	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_encoder.rs	/^    pub fn new(w: W) -> HDREncoder<W> {$/;"	P	implementation:HDREncoder
new	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/ico/decoder.rs	/^    pub fn new(mut r: R) -> ImageResult<ICODecoder<R>> {$/;"	P	implementation:ICODecoder
new	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/ico/encoder.rs	/^    pub fn new(w: W) -> ICOEncoder<W> {$/;"	P	implementation:ICOEncoder
new	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    pub fn new(image: I, x: u32, y: u32, width: u32, height: u32) -> SubImage<I> {$/;"	P	implementation:SubImage
new	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    pub fn new(scanline_bytes: usize, total_bytes: usize) -> Self {$/;"	P	implementation:ImageReadBuffer
new	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/decoder.rs	/^    pub fn new(r: R) -> ImageResult<JPEGDecoder<R>> {$/;"	P	implementation:JPEGDecoder
new	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/encoder.rs	/^    fn new(w: &'a mut W) -> Self {$/;"	P	implementation:BitWriter
new	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/encoder.rs	/^    pub fn new(w: &mut W) -> JPEGEncoder<W> {$/;"	P	implementation:JPEGEncoder
new	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/math/nq.rs	/^    pub fn new(samplefac: i32, colors: usize, pixels: &[u8]) -> Self {$/;"	P	implementation:NeuQuant
new	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/png.rs	/^    pub fn new(r: R) -> ImageResult<PNGDecoder<R>> {$/;"	P	implementation:PNGDecoder
new	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/png.rs	/^    pub fn new(w: W) -> PNGEncoder<W> {$/;"	P	implementation:PNGEncoder
new	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/autobreak.rs	/^    pub(crate) fn new(writer: W, line_capacity: usize) -> Self {$/;"	P	implementation:AutoBreak
new	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/decoder.rs	/^    pub fn new(read: R) -> ImageResult<PNMDecoder<R>> {$/;"	P	implementation:PNMDecoder
new	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/encoder.rs	/^    pub fn new(writer: W) -> Self {$/;"	P	implementation:PNMEncoder
new	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/tga/decoder.rs	/^    fn new() -> Header {$/;"	P	implementation:Header
new	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/tga/decoder.rs	/^    fn new(img_type: u8) -> ImageType {$/;"	P	implementation:ImageType
new	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/tga/decoder.rs	/^    pub fn new(r: R) -> ImageResult<TGADecoder<R>> {$/;"	P	implementation:TGADecoder
new	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/tiff.rs	/^    pub fn new(r: R) -> Result<TIFFDecoder<R>, ImageError> {$/;"	f
new	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/decoder.rs	/^    pub fn new(r: R) -> ImageResult<WebpDecoder<R>> {$/;"	P	implementation:WebpDecoder
new	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^    fn new() -> MacroBlock {$/;"	P	implementation:MacroBlock
new	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^    pub fn new() -> BoolReader {$/;"	P	implementation:BoolReader
new	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^    pub fn new(r: R) -> VP8Decoder<R> {$/;"	P	implementation:VP8Decoder
new	/home/go/Documents/Rust/renderer/src/geometry/bounds.rs	/^    fn new(p: &Point3<T>) -> Bounds3<T> {$/;"	P	implementation:Bounds3
new	/home/go/Documents/Rust/renderer/src/geometry/bounds.rs	/^    fn new(p: (&Point3<T>, &Point3<T>)) -> Bounds3<T> {$/;"	P	implementation:Bounds3
new	/home/go/Documents/Rust/renderer/src/geometry/bounds.rs	/^    fn new(p: T) -> Self::Output;$/;"	P	interface:New
new	/home/go/Documents/Rust/renderer/src/geometry/world.rs	/^    fn new();$/;"	P	implementation:World
new_bgr8	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dynimage.rs	/^    pub fn new_bgr8(w: u32, h: u32) -> DynamicImage {$/;"	P	implementation:DynamicImage
new_bgra8	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dynimage.rs	/^    pub fn new_bgra8(w: u32, h: u32) -> DynamicImage {$/;"	P	implementation:DynamicImage
new_luma8	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dynimage.rs	/^    pub fn new_luma8(w: u32, h: u32) -> DynamicImage {$/;"	P	implementation:DynamicImage
new_luma_a8	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dynimage.rs	/^    pub fn new_luma_a8(w: u32, h: u32) -> DynamicImage {$/;"	P	implementation:DynamicImage
new_nonstrict	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_decoder.rs	/^    pub fn new_nonstrict(r: R) -> ImageResult<HDRAdapter<R>> {$/;"	P	implementation:HDRAdapter
new_rgb8	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dynimage.rs	/^    pub fn new_rgb8(w: u32, h: u32) -> DynamicImage {$/;"	P	implementation:DynamicImage
new_rgba8	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dynimage.rs	/^    pub fn new_rgba8(w: u32, h: u32) -> DynamicImage {$/;"	P	implementation:DynamicImage
new_with_ico_format	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^    pub(crate) fn new_with_ico_format(r: R) -> ImageResult<BMPDecoder<R>> {$/;"	P	implementation:BMPDecoder
new_with_quality	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/encoder.rs	/^    pub fn new_with_quality(w: &mut W, quality: u8) -> JPEGEncoder<W> {$/;"	P	implementation:JPEGEncoder
next	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/animation.rs	/^    fn next(&mut self) -> Option<ImageResult<Frame>> {$/;"	P	implementation:Frames
next	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^    fn next(&mut self) -> Option<&'a mut [u8]> {$/;"	P	implementation:RowIterator
next	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^    fn next(&mut self) -> Option<RLEInsn> {$/;"	P	implementation:RLEInsnIterator
next	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    fn next(&mut self) -> Option<&'a P> {$/;"	f
next	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    fn next(&mut self) -> Option<&'a mut P> {$/;"	f
next	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    fn next(&mut self) -> Option<(u32, u32, &'a P)> {$/;"	f
next	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    fn next(&mut self) -> Option<(u32, u32, &'a mut P)> {$/;"	f
next	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/gif.rs	/^    fn next(&mut self) -> Option<ImageResult<animation::Frame>> {$/;"	P	implementation:GifFrameIterator
next	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_decoder.rs	/^    fn next(&mut self) -> Option<Self::Item> {$/;"	P	implementation:HDRImageDecoderIterator
next	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_encoder.rs	/^    fn next(&mut self) -> Option<Self::Item> {$/;"	P	implementation:NorunCombineIterator
next	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_encoder.rs	/^    fn next(&mut self) -> Option<Self::Item> {$/;"	P	implementation:RunIterator
next	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    fn next(&mut self) -> Option<(u32, u32, &'a mut I::Pixel)> {$/;"	f
next	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    fn next(&mut self) -> Option<(u32, u32, I::Pixel)> {$/;"	P	implementation:Pixels
next_back	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    fn next_back(&mut self) -> Option<&'a P> {$/;"	f
next_back	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    fn next_back(&mut self) -> Option<&'a mut P> {$/;"	f
no_file_header	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^    no_file_header: bool,$/;"	m	struct:BMPDecoder
non_disposed_frame	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/gif.rs	/^    non_disposed_frame: ImageBuffer<Rgba<u8>, Vec<u8>>,$/;"	m	struct:GifFrameIterator
noramlize	/home/go/Documents/Rust/renderer/src/geometry/vector.rs	/^    pub fn noramlize(self) -> Vector3f {$/;"	P	implementation:Vector3f
normal	/home/go/Documents/Rust/renderer/src/geometry/mod.rs	/^pub mod normal;$/;"	n
normal	/home/go/Documents/Rust/renderer/src/geometry/object.rs	/^    normal: Normal3f,$/;"	m	struct:Plane
normal	/home/go/Documents/Rust/renderer/src/geometry/ray.rs	/^    pub normal: Normal3f,$/;"	m	struct:ShadeRec
normal_forms	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    fn normal_forms() {$/;"	f	module:tests
noruncombine_test	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_encoder.rs	/^fn noruncombine_test() {$/;"	f
nq	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/math/mod.rs	/^pub mod nq;$/;"	n
num_bytes	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^fn num_bytes(width: i32, length: i32, channels: usize) -> Option<usize> {$/;"	f
num_channels	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^    fn num_channels(&self) -> usize {$/;"	P	implementation:BMPDecoder
num_color_planes	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/ico/decoder.rs	/^    num_color_planes: u16,$/;"	m	struct:DirEntry
num_components	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^pub fn num_components(c: ColorType) -> usize {$/;"	f
num_partitions	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^    num_partitions: u8,$/;"	m	struct:VP8Decoder
o	/home/go/Documents/Rust/renderer/src/geometry/ray.rs	/^    pub o: Point3f,$/;"	m	struct:Ray
object	/home/go/Documents/Rust/renderer/src/geometry/mod.rs	/^pub mod object;$/;"	n
offset	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    offset: usize,$/;"	m	struct:ImageReadBuffer
offset	/home/go/Documents/Rust/renderer/src/geometry/bounds.rs	/^    pub fn offset(&self, p: &Point3<T>) -> Vector3<T> {$/;"	f
open	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dynimage.rs	/^pub fn open<P>(path: P) -> ImageResult<DynamicImage>$/;"	f
open_impl	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dynimage.rs	/^fn open_impl(path: &Path) -> ImageResult<DynamicImage> {$/;"	f
open_window	/home/go/Documents/Rust/renderer/src/geometry/world.rs	/^    fn open_window(hres: i32, vres: i32);$/;"	f	method:World::render_scene
orientation	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_decoder.rs	/^    pub orientation: ((i8, i8), (i8, i8)),$/;"	m	struct:HDRMetadata
overlay	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/imageops/mod.rs	/^pub fn overlay<I: GenericImage>(bottom: &mut I, top: &I, x: u32, y: u32) {$/;"	f
overlay_bounds	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/imageops/mod.rs	/^pub fn overlay_bounds($/;"	f
p_max	/home/go/Documents/Rust/renderer/src/geometry/bounds.rs	/^    pub p_max: Point3<T>,$/;"	m	struct:Bounds3
p_min	/home/go/Documents/Rust/renderer/src/geometry/bounds.rs	/^    pub p_min: Point3<T>,$/;"	m	struct:Bounds3
pad_byte	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/encoder.rs	/^    fn pad_byte(&mut self) -> io::Result<()> {$/;"	P	implementation:BitWriter
palette	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^    palette: Option<Vec<(u8, u8, u8)>>,$/;"	m	struct:BMPDecoder
pam_blackandwhite	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/decoder.rs	/^    fn pam_blackandwhite() {$/;"	f	module:tests
pam_grayscale	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/decoder.rs	/^    fn pam_grayscale() {$/;"	f	module:tests
pam_rgb	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/decoder.rs	/^    fn pam_rgb() {$/;"	f	module:tests
panic_cwh_out_of_bounds	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^fn panic_cwh_out_of_bounds($/;"	f
panic_pixel_out_of_bounds	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^fn panic_pixel_out_of_bounds($/;"	f
panicked	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/autobreak.rs	/^    panicked: bool, \/\/ see https:\/\/github.com\/rust-lang\/rust\/issues\/30888$/;"	m	struct:AutoBreak
parse_dimensions_line	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_decoder.rs	/^fn parse_dimensions_line(line: &str, strict: bool) -> ImageResult<(u32, u32)> {$/;"	f
parse_space_separated_f32	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_decoder.rs	/^fn parse_space_separated_f32(line: &str, vals: &mut [f32], name: &str) -> ImageResult<bool> {$/;"	f
partial_cmp	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    fn partial_cmp(&self, other: &Self) -> Option<cmp::Ordering> {$/;"	P	implementation:NormalForm
partitions	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^    partitions: [BoolReader; 8],$/;"	m	struct:VP8Decoder
pbm_ascii	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/decoder.rs	/^    fn pbm_ascii() {$/;"	f	module:tests
pbm_ascii_nospace	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/decoder.rs	/^    fn pbm_ascii_nospace() {$/;"	f	module:tests
pbm_binary	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/decoder.rs	/^    fn pbm_binary() {$/;"	f	module:tests
pbm_binary_ascii_termination	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/decoder.rs	/^    fn pbm_binary_ascii_termination() {$/;"	f	module:tests
pgm_ascii	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/decoder.rs	/^    fn pgm_ascii() {$/;"	f	module:tests
pgm_binary	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/decoder.rs	/^    fn pgm_binary() {$/;"	f	module:tests
phantom	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    phantom: PhantomData<P>,$/;"	m	struct:View
phantom	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    phantom: PhantomData<P>,$/;"	m	struct:ViewMut
pixel_aspect_ratio	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_decoder.rs	/^    pub pixel_aspect_ratio: Option<f32>,$/;"	m	struct:HDRMetadata
pixel_depth	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/tga/decoder.rs	/^    pixel_depth: u8,    \/\/ bits per pixel$/;"	m	struct:Header
pixel_diffs	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/imageops/affine.rs	/^    fn pixel_diffs<I, J, P>(left: &I, right: &J) -> Vec<((u32, u32, P), (u32, u32, P))>$/;"	f	module:test
pixel_indices	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    fn pixel_indices(&self, x: u32, y: u32) -> Option<Range<usize>> {$/;"	f
pixel_type	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^    pub pixel_type: u8,$/;"	m	struct:Frame
pixels	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    pixels: Pixels<'a, P>,$/;"	m	struct:EnumeratePixels
pixels	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    pixels: PixelsMut<'a, P>,$/;"	m	struct:EnumeratePixelsMut
pixels	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    pub fn pixels(&self) -> Pixels<P> {$/;"	f
pixels	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    fn pixels(&self) -> Pixels<Self> {$/;"	P	interface:GenericImageView
pixels_mut	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    pub fn pixels_mut(&mut self) -> PixelsMut<P> {$/;"	f
pixels_mut	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    fn pixels_mut(&mut self) -> MutPixels<Self> {$/;"	P	interface:GenericImage
png	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/lib.rs	/^pub mod png;$/;"	n
pnm	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/lib.rs	/^pub mod pnm;$/;"	n
point	/home/go/Documents/Rust/renderer/src/geometry/mod.rs	/^pub mod point;$/;"	n
point	/home/go/Documents/Rust/renderer/src/geometry/object.rs	/^    point: Point3f,$/;"	m	struct:Plane
point3f	/home/go/Documents/Rust/renderer/src/geometry/point.rs	/^macro_rules! point3f {$/;"	M
pos	/home/go/Documents/Rust/renderer/src/light.rs	/^    pub pos: Point3f,$/;"	m	struct:Light
power	/home/go/Documents/Rust/renderer/src/light.rs	/^    pub power: Spectrum,$/;"	m	struct:Light
predict_4x4	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^fn predict_4x4(ws: &mut [u8], stride: usize, modes: &[i8], resdata: &[i32]) {$/;"	f
predict_bdcpred	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^fn predict_bdcpred(a: &mut [u8], x0: usize, y0: usize, stride: usize) {$/;"	f
predict_bhdpred	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^fn predict_bhdpred(a: &mut [u8], x0: usize, y0: usize, stride: usize) {$/;"	f
predict_bhepred	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^fn predict_bhepred(a: &mut [u8], x0: usize, y0: usize, stride: usize) {$/;"	f
predict_bhupred	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^fn predict_bhupred(a: &mut [u8], x0: usize, y0: usize, stride: usize) {$/;"	f
predict_bldpred	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^fn predict_bldpred(a: &mut [u8], x0: usize, y0: usize, stride: usize) {$/;"	f
predict_brdpred	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^fn predict_brdpred(a: &mut [u8], x0: usize, y0: usize, stride: usize) {$/;"	f
predict_bvepred	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^fn predict_bvepred(a: &mut [u8], x0: usize, y0: usize, stride: usize) {$/;"	f
predict_bvlpred	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^fn predict_bvlpred(a: &mut [u8], x0: usize, y0: usize, stride: usize) {$/;"	f
predict_bvrpred	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^fn predict_bvrpred(a: &mut [u8], x0: usize, y0: usize, stride: usize) {$/;"	f
predict_dcpred	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^fn predict_dcpred(a: &mut [u8], size: usize, stride: usize, above: bool, left: bool) {$/;"	f
predict_hpred	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^fn predict_hpred(a: &mut [u8], size: usize, x0: usize, y0: usize, stride: usize) {$/;"	f
predict_tmpred	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^fn predict_tmpred(a: &mut [u8], size: usize, x0: usize, y0: usize, stride: usize) {$/;"	f
predict_vpred	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^fn predict_vpred(a: &mut [u8], size: usize, x0: usize, y0: usize, stride: usize) {$/;"	f
prev	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_encoder.rs	/^    prev: Option<RunOrNot>,$/;"	m	struct:NorunCombineIterator
prob_intra	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^    prob_intra: Prob,$/;"	m	struct:VP8Decoder
prob_skip_false	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^    prob_skip_false: Option<Prob>,$/;"	m	struct:VP8Decoder
put_pixel	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    fn put_pixel(&mut self, x: u32, y: u32, pixel: P) {$/;"	f
put_pixel	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    pub fn put_pixel(&mut self, x: u32, y: u32, pixel: P) {$/;"	f
put_pixel	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dynimage.rs	/^    fn put_pixel(&mut self, x: u32, y: u32, pixel: color::Rgba<u8>) {$/;"	P	implementation:DynamicImage
put_pixel	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    fn put_pixel(&mut self, x: u32, y: u32, pixel: Self::Pixel) {$/;"	f
put_pixel	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    fn put_pixel(&mut self, x: u32, y: u32, pixel: Self::Pixel) {$/;"	f
put_pixel	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    fn put_pixel(&mut self, x: u32, y: u32, pixel: Self::Pixel);$/;"	P	interface:GenericImage
quantizer_level	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^    quantizer_level: i8,$/;"	m	struct:Segment
r	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^    r: &'a mut R,$/;"	m	struct:RLEInsnIterator
r	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^    r: Bitfield,$/;"	m	struct:Bitfields
r	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^    r: R,$/;"	m	struct:BMPDecoder
r	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_decoder.rs	/^    r: R,$/;"	m	struct:HDRDecoder
r	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_decoder.rs	/^    r: R,$/;"	m	struct:HDRImageDecoderIterator
r	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/math/nq.rs	/^    r: T,$/;"	m	struct:Quad
r	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/tga/decoder.rs	/^    r: R,$/;"	m	struct:TGADecoder
r	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/decoder.rs	/^    r: R,$/;"	m	struct:WebpDecoder
r	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^    r: R,$/;"	m	struct:VP8Decoder
r	/home/go/Documents/Rust/renderer/src/spectrum.rs	/^    pub r: f64,$/;"	m	struct:Spectrum
radius	/home/go/Documents/Rust/renderer/src/geometry/object.rs	/^    radius: f64,$/;"	m	struct:Sphere
range	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^    range: u32,$/;"	m	struct:BoolReader
raw_pixels	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dynimage.rs	/^    pub fn raw_pixels(&self) -> Vec<u8> {$/;"	P	implementation:DynamicImage
ray	/home/go/Documents/Rust/renderer/src/geometry/mod.rs	/^pub mod ray;$/;"	n
read	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^    fn read(&self, data: u32) -> u8 {$/;"	P	implementation:Bitfield
read	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dxt.rs	/^    fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {$/;"	P	implementation:DXTReader
read	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    pub fn read<F>(&mut self, buf: &mut [u8], mut read_scanline: F) -> io::Result<usize>$/;"	P	implementation:ImageReadBuffer
read	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/decoder.rs	/^            fn read(&mut self, buf: &mut [u8]) -> Result<usize> {$/;"	P	implementation:tests::pbm_binary_ascii_termination::FailRead
read	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/decoder.rs	/^    fn read(&mut self) -> ImageResult<Vec<u8>> {$/;"	P	implementation:PNMDecoder
read	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/tga/decoder.rs	/^    fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {$/;"	P	implementation:TGAReader
read_16_bit_pixel_data	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^    fn read_16_bit_pixel_data(&mut self, bitfields: Option<&Bitfields>) -> ImageResult<Vec<u8>> /;"	P	implementation:BMPDecoder
read_32_bit_pixel_data	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^    fn read_32_bit_pixel_data(&mut self) -> ImageResult<Vec<u8>> {$/;"	P	implementation:BMPDecoder
read_all_encoded_data	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/tga/decoder.rs	/^    fn read_all_encoded_data(&mut self) -> ImageResult<Vec<u8>> {$/;"	P	implementation:TGADecoder
read_arbitrary_header	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/decoder.rs	/^    fn read_arbitrary_header(&mut self) -> ImageResult<ArbitraryHeader> {$/;"	P	interface:HeaderReader
read_arbitrary_header	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/decoder.rs	/^    fn read_arbitrary_header(mut reader: BufReader<R>) -> ImageResult<PNMDecoder<R>> {$/;"	P	implementation:PNMDecoder
read_ascii	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/decoder.rs	/^    fn read_ascii<Basic: Sample>(&mut self, components: u32) -> ImageResult<Vec<u8>> {$/;"	P	implementation:PNMDecoder
read_bitmap_core_header	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^    fn read_bitmap_core_header(&mut self) -> ImageResult<()> {$/;"	P	implementation:BMPDecoder
read_bitmap_header	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/decoder.rs	/^    fn read_bitmap_header($/;"	P	implementation:PNMDecoder
read_bitmap_header	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/decoder.rs	/^    fn read_bitmap_header(&mut self, encoding: SampleEncoding) -> ImageResult<BitmapHeader> {$/;"	P	interface:HeaderReader
read_bitmap_info_header	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^    fn read_bitmap_info_header(&mut self) -> ImageResult<()> {$/;"	P	implementation:BMPDecoder
read_bitmasks	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^    fn read_bitmasks(&mut self) -> ImageResult<()> {$/;"	P	implementation:BMPDecoder
read_bool	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^    pub fn read_bool(&mut self, probability: u8) -> u8 {$/;"	P	implementation:BoolReader
read_byte	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_decoder.rs	/^fn read_byte<R: BufRead>(r: &mut R) -> io::Result<u8> {$/;"	f
read_coefficients	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^    fn read_coefficients($/;"	P	implementation:VP8Decoder
read_color_information	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/tga/decoder.rs	/^    fn read_color_information(&mut self) -> ImageResult<()> {$/;"	P	implementation:TGADecoder
read_color_map	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/tga/decoder.rs	/^    fn read_color_map(&mut self) -> ImageResult<()> {$/;"	P	implementation:TGADecoder
read_encoded_data	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/tga/decoder.rs	/^    fn read_encoded_data(&mut self, num_bytes: usize) -> io::Result<Vec<u8>> {$/;"	P	implementation:TGADecoder
read_encoded_line	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/tga/decoder.rs	/^    fn read_encoded_line(&mut self) -> io::Result<Vec<u8>> {$/;"	P	implementation:TGADecoder
read_entries	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/ico/decoder.rs	/^fn read_entries<R: Read>(r: &mut R) -> ImageResult<Vec<DirEntry>> {$/;"	f
read_entry	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/ico/decoder.rs	/^fn read_entry<R: Read>(r: &mut R) -> ImageResult<DirEntry> {$/;"	f
read_file_header	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^    fn read_file_header(&mut self) -> ImageResult<()> {$/;"	P	implementation:BMPDecoder
read_flag	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^    pub fn read_flag(&mut self) -> bool {$/;"	P	implementation:BoolReader
read_frame	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/decoder.rs	/^    fn read_frame(&mut self) -> ImageResult<()> {$/;"	P	implementation:WebpDecoder
read_frame_header	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^    fn read_frame_header(&mut self) -> io::Result<()> {$/;"	P	implementation:VP8Decoder
read_full_byte_pixel_data	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^    fn read_full_byte_pixel_data(&mut self, format: &FormatFullBytes) -> ImageResult<Vec<u8>> {$/;"	P	implementation:BMPDecoder
read_graymap_header	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/decoder.rs	/^    fn read_graymap_header($/;"	P	implementation:PNMDecoder
read_graymap_header	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/decoder.rs	/^    fn read_graymap_header(&mut self, encoding: SampleEncoding) -> ImageResult<GraymapHeader> {$/;"	P	interface:HeaderReader
read_header	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/tga/decoder.rs	/^    fn read_header(&mut self) -> ImageResult<()> {$/;"	P	implementation:TGADecoder
read_image	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^    fn read_image(mut self) -> ImageResult<Vec<u8>> {$/;"	P	implementation:BMPDecoder
read_image	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dxt.rs	/^    fn read_image(mut self) -> ImageResult<Vec<u8>> {$/;"	P	implementation:DXTDecoder
read_image	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/gif.rs	/^    fn read_image(mut self) -> ImageResult<Vec<u8>> {$/;"	P	implementation:Decoder
read_image	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_decoder.rs	/^    fn read_image(mut self) -> ImageResult<Vec<u8>> {$/;"	P	implementation:HDRAdapter
read_image	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/ico/decoder.rs	/^    fn read_image(self) -> ImageResult<Vec<u8>> {$/;"	P	implementation:ICODecoder
read_image	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    fn read_image(self) -> ImageResult<Vec<u8>> {$/;"	P	interface:ImageDecoder
read_image	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/decoder.rs	/^    fn read_image(mut self) -> ImageResult<Vec<u8>> {$/;"	P	implementation:JPEGDecoder
read_image	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/png.rs	/^    fn read_image(mut self) -> ImageResult<Vec<u8>> {$/;"	P	implementation:PNGDecoder
read_image	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/decoder.rs	/^    fn read_image(mut self) -> ImageResult<Vec<u8>> {$/;"	P	implementation:PNMDecoder
read_image	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/tga/decoder.rs	/^    fn read_image(mut self) -> ImageResult<Vec<u8>> {$/;"	P	implementation:TGADecoder
read_image	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/tiff.rs	/^    fn read_image(mut self) -> ImageResult<Vec<u8>> {$/;"	P	implementation:TIFFDecoder
read_image	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/decoder.rs	/^    fn read_image(self) -> ImageResult<Vec<u8>> {$/;"	P	implementation:WebpDecoder
read_image_data	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^    pub(crate) fn read_image_data(&mut self) -> ImageResult<Vec<u8>> {$/;"	P	implementation:BMPDecoder
read_image_data	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_decoder.rs	/^    fn read_image_data(&mut self) -> ImageResult<()> {$/;"	P	implementation:HDRAdapter
read_image_data	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/tga/decoder.rs	/^    fn read_image_data(&mut self) -> ImageResult<Vec<u8>> {$/;"	P	implementation:TGADecoder
read_image_hdr	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_decoder.rs	/^    pub fn read_image_hdr(self) -> ImageResult<Vec<Rgb<f32>>> {$/;"	P	implementation:HDRDecoder
read_image_id	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/tga/decoder.rs	/^    fn read_image_id(&mut self) -> ImageResult<()> {$/;"	P	implementation:TGADecoder
read_image_ldr	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_decoder.rs	/^    pub fn read_image_ldr(self) -> ImageResult<Vec<Rgb<u8>>> {$/;"	P	implementation:HDRDecoder
read_image_native	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_decoder.rs	/^    pub fn read_image_native(mut self) -> ImageResult<Vec<RGBE8Pixel>> {$/;"	P	implementation:HDRDecoder
read_image_transform	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_decoder.rs	/^    pub fn read_image_transform<T: Send, F: Send + Sync + Fn(RGBE8Pixel) -> T>($/;"	P	implementation:HDRDecoder
read_image_with_progress	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    fn read_image_with_progress<F: Fn(Progress)>($/;"	P	interface:ImageDecoder
read_line_u8	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_decoder.rs	/^fn read_line_u8<R: BufRead>(r: &mut R) -> ::std::io::Result<Option<Vec<u8>>> {$/;"	f
read_line_u8_test	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_decoder.rs	/^fn read_line_u8_test() {$/;"	f
read_literal	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^    pub fn read_literal(&mut self, n: u8) -> u8 {$/;"	P	implementation:BoolReader
read_loop_filter_adjustments	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^    fn read_loop_filter_adjustments(&mut self) {$/;"	P	implementation:VP8Decoder
read_macroblock_header	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^    fn read_macroblock_header(&mut self, mbx: usize) -> (bool, MacroBlock) {$/;"	P	implementation:VP8Decoder
read_magic_constant	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/decoder.rs	/^    fn read_magic_constant(&mut self) -> ImageResult<[u8; 2]> {$/;"	P	interface:HeaderReader
read_magnitude_and_sign	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^    pub fn read_magnitude_and_sign(&mut self, n: u8) -> i32 {$/;"	P	implementation:BoolReader
read_metadata	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^    fn read_metadata(&mut self) -> ImageResult<()> {$/;"	P	implementation:BMPDecoder
read_metadata	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/tga/decoder.rs	/^    fn read_metadata(&mut self) -> ImageResult<()> {$/;"	P	implementation:TGADecoder
read_metadata	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/decoder.rs	/^    fn read_metadata(&mut self) -> ImageResult<()> {$/;"	P	implementation:WebpDecoder
read_metadata_in_ico_format	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^    pub fn read_metadata_in_ico_format(&mut self) -> ImageResult<()> {$/;"	P	implementation:BMPDecoder
read_next_line	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/decoder.rs	/^    fn read_next_line(&mut self) -> ImageResult<String> {$/;"	P	interface:HeaderReader
read_next_string	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/decoder.rs	/^    fn read_next_string(&mut self) -> ImageResult<String> {$/;"	P	interface:HeaderReader
read_next_u32	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/decoder.rs	/^    fn read_next_u32(&mut self) -> ImageResult<u32> {$/;"	P	interface:HeaderReader
read_palette	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^    fn read_palette(&mut self) -> ImageResult<()> {$/;"	P	implementation:BMPDecoder
read_palettized_pixel_data	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^    fn read_palettized_pixel_data(&mut self) -> ImageResult<Vec<u8>> {$/;"	P	implementation:BMPDecoder
read_pixmap_header	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/decoder.rs	/^    fn read_pixmap_header($/;"	P	implementation:PNMDecoder
read_pixmap_header	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/decoder.rs	/^    fn read_pixmap_header(&mut self, encoding: SampleEncoding) -> ImageResult<PixmapHeader> {$/;"	P	interface:HeaderReader
read_quantization_indices	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^    fn read_quantization_indices(&mut self) {$/;"	P	implementation:VP8Decoder
read_raw_file	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_decoder.rs	/^pub fn read_raw_file<P: AsRef<Path>>(path: P) -> ::std::io::Result<Vec<Rgb<f32>>> {$/;"	f
read_rect	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    fn read_rect($/;"	P	interface:ImageDecoderExt
read_rect_with_progress	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^    fn read_rect_with_progress<F: Fn(Progress)>($/;"	P	implementation:BMPDecoder
read_rect_with_progress	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dxt.rs	/^    fn read_rect_with_progress<F: Fn(Progress)>($/;"	P	implementation:DXTDecoder
read_rect_with_progress	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_decoder.rs	/^    fn read_rect_with_progress<F: Fn(Progress)>($/;"	P	implementation:HDRAdapter
read_rect_with_progress	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    fn read_rect_with_progress<F: Fn(Progress)>($/;"	P	interface:ImageDecoderExt
read_residual_data	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^    fn read_residual_data(&mut self, mb: &MacroBlock, mbx: usize, p: usize) -> [i32; 384] {$/;"	P	implementation:VP8Decoder
read_rgbe	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_decoder.rs	/^fn read_rgbe<R: BufRead>(r: &mut R) -> io::Result<RGBE8Pixel> {$/;"	f
read_riff_header	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/decoder.rs	/^    fn read_riff_header(&mut self) -> ImageResult<u32> {$/;"	P	implementation:WebpDecoder
read_rle_data	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^    fn read_rle_data(&mut self, image_type: ImageType) -> ImageResult<Vec<u8>> {$/;"	P	implementation:BMPDecoder
read_rle_data_step	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^    fn read_rle_data_step($/;"	P	implementation:BMPDecoder
read_samples	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/decoder.rs	/^    fn read_samples<S: Sample>(&mut self, components: u32) -> ImageResult<Vec<u8>> {$/;"	P	implementation:PNMDecoder
read_scanline	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dxt.rs	/^    fn read_scanline(&mut self, buf: &mut [u8]) -> io::Result<usize> {$/;"	P	implementation:DXTDecoder
read_scanline	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_decoder.rs	/^fn read_scanline<R: BufRead>(r: &mut R, buf: &mut [RGBE8Pixel]) -> ImageResult<()> {$/;"	f
read_scanline	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^        fn read_scanline(m: &mut MockDecoder, buf: &mut [u8]) -> io::Result<usize> {$/;"	f	function:tests::test_load_rect
read_scanline	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/tga/decoder.rs	/^    fn read_scanline(&mut self, buf: &mut [u8]) -> io::Result<usize> {$/;"	P	implementation:TGADecoder
read_segment_updates	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^    fn read_segment_updates(&mut self) {$/;"	P	implementation:VP8Decoder
read_separated_ascii	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/decoder.rs	/^fn read_separated_ascii<T: FromStr>(reader: &mut Read) -> ImageResult<T>$/;"	f
read_vp8_header	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/decoder.rs	/^    fn read_vp8_header(&mut self) -> ImageResult<()> {$/;"	P	implementation:WebpDecoder
read_with_tree	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^    pub fn read_with_tree(&mut self, tree: &[i8], probs: &[Prob], start: isize) -> i8 {$/;"	P	implementation:BoolReader
reader	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^    pub(crate) fn reader(&mut self) -> &mut R {$/;"	P	implementation:BMPDecoder
reader	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/gif.rs	/^    reader: gif::Reader<R>,$/;"	m	struct:Decoder
reader	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/gif.rs	/^    reader: gif::Reader<R>,$/;"	m	struct:GifFrameIterator
reader	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/png.rs	/^    reader: png::Reader<R>,$/;"	m	struct:PNGDecoder
reader	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/decoder.rs	/^    reader: BufReader<R>,$/;"	m	struct:PNMDecoder
real_height	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/ico/decoder.rs	/^    fn real_height(&self) -> u16 {$/;"	P	implementation:DirEntry
real_width	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/ico/decoder.rs	/^    fn real_width(&self) -> u16 {$/;"	P	implementation:DirEntry
relative_dist	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_encoder.rs	/^    fn relative_dist(a: Rgb<f32>, b: Rgb<f32>) -> f32 {$/;"	f	function:to_rgbe8_test
render_scene	/home/go/Documents/Rust/renderer/src/geometry/world.rs	/^    fn render_scene() {$/;"	P	implementation:World
replace	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/imageops/mod.rs	/^pub fn replace<I: GenericImage>(bottom: &mut I, top: &I, x: u32, y: u32) {$/;"	f
reserved	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/ico/decoder.rs	/^    reserved: u8,$/;"	m	struct:DirEntry
resize	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dynimage.rs	/^    pub fn resize(&self, nwidth: u32, nheight: u32, filter: imageops::FilterType) -> DynamicImag/;"	P	implementation:DynamicImage
resize	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/imageops/sample.rs	/^pub fn resize<I: GenericImageView + 'static>($/;"	f
resize_dimensions	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dynimage.rs	/^fn resize_dimensions(width: u32, height: u32, nwidth: u32, nheight: u32, fill: bool) -> (u32, u3/;"	f
resize_exact	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dynimage.rs	/^    pub fn resize_exact($/;"	P	implementation:DynamicImage
resize_handles_fill	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dynimage.rs	/^    fn resize_handles_fill() {$/;"	f	module:test
resize_handles_overflow	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dynimage.rs	/^    fn resize_handles_overflow() {$/;"	f	module:test
resize_to_fill	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dynimage.rs	/^    pub fn resize_to_fill($/;"	P	implementation:DynamicImage
reverse_encoding	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/tga/decoder.rs	/^    fn reverse_encoding(&mut self, pixels: &mut [u8]) {$/;"	P	implementation:TGADecoder
rgb_to_ycbcr	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/encoder.rs	/^fn rgb_to_ycbcr(r: u8, g: u8, b: u8) -> (u8, u8, u8) {$/;"	f
rgbe8	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_decoder.rs	/^pub fn rgbe8(r: u8, g: u8, b: u8, e: u8) -> RGBE8Pixel {$/;"	f
rl_marker	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_decoder.rs	/^    fn rl_marker(pix: RGBE8Pixel) -> Option<usize> {$/;"	f	function:decode_old_rle
rle_compress	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_encoder.rs	/^fn rle_compress(data: &[u8], rle: &mut Vec<u8>) {$/;"	f
rotate180	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dynimage.rs	/^    pub fn rotate180(&self) -> DynamicImage {$/;"	P	implementation:DynamicImage
rotate180	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/imageops/affine.rs	/^pub fn rotate180<I: GenericImageView + 'static>($/;"	f
rotate270	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dynimage.rs	/^    pub fn rotate270(&self) -> DynamicImage {$/;"	P	implementation:DynamicImage
rotate270	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/imageops/affine.rs	/^pub fn rotate270<I: GenericImageView + 'static>($/;"	f
rotate90	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dynimage.rs	/^    pub fn rotate90(&self) -> DynamicImage {$/;"	P	implementation:DynamicImage
rotate90	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/imageops/affine.rs	/^pub fn rotate90<I: GenericImageView + 'static>($/;"	f
round_trip_3px_rgb	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/encoder.rs	/^    fn round_trip_3px_rgb() {$/;"	f	module:tests
round_trip_gray	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/encoder.rs	/^    fn round_trip_gray() {$/;"	f	module:tests
round_trip_graya	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/encoder.rs	/^    fn round_trip_graya() {$/;"	f	module:tests
round_trip_image	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/encoder.rs	/^    fn round_trip_image(image: &[u8], width: u32, height: u32, c: ColorType) -> Vec<u8> {$/;"	f	module:tests
round_trip_single_pixel_rgb	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/encoder.rs	/^    fn round_trip_single_pixel_rgb() {$/;"	f	module:tests
round_trip_single_pixel_rgba	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/encoder.rs	/^    fn round_trip_single_pixel_rgba() {$/;"	f	module:tests
roundtrip_rgb	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/mod.rs	/^    fn roundtrip_rgb() {$/;"	f	module:tests
roundtrip_sanity_check	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/encoder.rs	/^    fn roundtrip_sanity_check() {$/;"	f	module:tests
roundtrip_u16	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/mod.rs	/^    fn roundtrip_u16() {$/;"	f	module:tests
row	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dxt.rs	/^    row: u32,$/;"	m	struct:DXTDecoder
row_bytes	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    fn row_bytes(&self) -> u64 {$/;"	P	interface:ImageDecoder
row_major_packed	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    pub fn row_major_packed(channels: u8, width: u32, height: u32) -> Self {$/;"	P	implementation:SampleLayout
rows	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^    fn rows<'a>(&self, pixel_data: &'a mut [u8]) -> RowIterator<'a> {$/;"	P	implementation:BMPDecoder
runiter	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_encoder.rs	/^    runiter: RunIterator<'a>,$/;"	m	struct:NorunCombineIterator
runiterator_test	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_encoder.rs	/^fn runiterator_test() {$/;"	f
s	/home/go/Documents/Rust/renderer/src/geometry/world.rs	/^    s: f64,$/;"	m	struct:World::ViewPlane
sample	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/imageops/mod.rs	/^mod sample;$/;"	n
sample_encoding	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/header.rs	/^    pub fn sample_encoding(self) -> SampleEncoding {$/;"	P	implementation:PNMSubtype
sample_layout	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    pub fn sample_layout(&self) -> SampleLayout {$/;"	f
sample_val	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/imageops/sample.rs	/^    fn sample_val(val: S) -> S::Larger {$/;"	P	implementation:ThumbnailSum
samplefac	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/math/nq.rs	/^    samplefac: i32,$/;"	m	struct:NeuQuant
samples	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    pub fn samples(&self) -> &Buffer {$/;"	f
samples	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    pub samples: Buffer,$/;"	m	struct:FlatSamples
save	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    pub fn save<Q>(&self, path: Q) -> io::Result<()>$/;"	f
save	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dynimage.rs	/^    pub fn save<Q>(&self, path: Q) -> io::Result<()>$/;"	P	implementation:DynamicImage
save_buffer	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dynimage.rs	/^pub fn save_buffer<P>($/;"	f
save_buffer_impl	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dynimage.rs	/^fn save_buffer_impl($/;"	f
scanline	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_decoder.rs	/^    scanline: usize,      \/\/ current scanline$/;"	m	struct:HDRImageDecoderIterator
scanline_bytes	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dxt.rs	/^    fn scanline_bytes(&self) -> u64 {$/;"	P	implementation:DXTDecoder
scanline_bytes	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^            fn scanline_bytes(&self) -> u64 { self.scanline_bytes }$/;"	P	implementation:tests::test_load_rect::MockDecoder
scanline_bytes	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^        struct MockDecoder {scanline_number: u64, scanline_bytes: u64}$/;"	m	struct:tests::test_load_rect::MockDecoder
scanline_bytes	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    fn scanline_bytes(&self) -> u64 {$/;"	P	interface:ImageDecoder
scanline_bytes	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    scanline_bytes: usize,$/;"	m	struct:ImageReadBuffer
scanline_bytes	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/tga/decoder.rs	/^    fn scanline_bytes(&self) -> u64 {$/;"	P	implementation:TGADecoder
scanline_cnt	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_decoder.rs	/^    scanline_cnt: usize,$/;"	m	struct:HDRImageDecoderIterator
scanline_number	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^        struct MockDecoder {scanline_number: u64, scanline_bytes: u64}$/;"	m	struct:tests::test_load_rect::MockDecoder
search_netindex	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/math/nq.rs	/^    fn search_netindex(&self, b: u8, g: u8, r: u8, a: u8) -> usize {$/;"	P	implementation:NeuQuant
seek_scanline	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^        fn seek_scanline(m: &mut MockDecoder, n: u64) -> io::Result<()> {$/;"	f	function:tests::test_load_rect
seek_to_start	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/ico/decoder.rs	/^    fn seek_to_start<R: Read + Seek>(&self, r: &mut R) -> ImageResult<()> {$/;"	P	implementation:DirEntry
segment	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^    segment: [Segment; MAX_SEGMENTS],$/;"	m	struct:VP8Decoder
segment_tree_probs	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^    segment_tree_probs: [Prob; 3],$/;"	m	struct:VP8Decoder
segmentid	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^    segmentid: u8,$/;"	m	struct:MacroBlock
segments_enabled	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^    segments_enabled: bool,$/;"	m	struct:VP8Decoder
segments_update_map	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^    segments_update_map: bool,$/;"	m	struct:VP8Decoder
selected_entry	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/ico/decoder.rs	/^    selected_entry: DirEntry,$/;"	m	struct:ICODecoder
set_1bit_pixel_run	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^fn set_1bit_pixel_run<'a, T: Iterator<Item = &'a u8>>($/;"	f
set_4bit_pixel_run	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^fn set_4bit_pixel_run<'a, T: Iterator<Item = &'a u8>>($/;"	f
set_8bit_pixel_run	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^fn set_8bit_pixel_run<'a, T: Iterator<Item = &'a u8>>($/;"	f
set_pixel	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^        macro_rules! set_pixel {$/;"	M	function:set_4bit_pixel_run
sg	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_decoder.rs	/^        fn sg<T: Primitive + Zero>(v: f32, scale: f32, gamma: f32) -> T {$/;"	f	method:RGBE8Pixel::to_ldr_scale_gamma
sharpness_level	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^    sharpness_level: u8,$/;"	m	struct:Frame
shift	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^    shift: u32,$/;"	m	struct:Bitfield
shrink_to	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    pub fn shrink_to(&mut self, channels: u8, width: u32, height: u32) {$/;"	P	implementation:FlatSamples
shrink_to	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    pub fn shrink_to(&mut self, channels: u8, width: u32, height: u32) {$/;"	P	implementation:SampleLayout
shrink_to	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    pub fn shrink_to(&mut self, width: u32, height: u32) {$/;"	f
sinc	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/imageops/sample.rs	/^fn sinc(t: f32) -> f32 {$/;"	f
size_hint	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_decoder.rs	/^    fn size_hint(&self) -> (usize, Option<usize>) {$/;"	P	implementation:HDRImageDecoderIterator
slice_buffer	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    fn slice_buffer() {$/;"	f	module:test
spe	/home/go/Documents/Rust/renderer/src/spectrum.rs	/^macro_rules! spe {$/;"	M
spectrum	/home/go/Documents/Rust/renderer/src/lib.rs	/^pub mod spectrum;$/;"	n
sphere	/home/go/Documents/Rust/renderer/src/geometry/world.rs	/^    sphere: Sphere,$/;"	m	struct:World
split_at_first	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_decoder.rs	/^fn split_at_first<'a>(s: &'a str, separator: &str) -> Option<(&'a str, &'a str)> {$/;"	f
split_at_first_test	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_decoder.rs	/^fn split_at_first_test() {$/;"	f
square	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dxt.rs	/^fn square(a: i32) -> i32 {$/;"	f
start_offset	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/tga/decoder.rs	/^    start_offset: usize,$/;"	m	struct:ColorMap
stride	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    fn stride(self) -> usize {$/;"	P	implementation:Dim
strides_cwh	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    pub fn strides_cwh(&self) -> (usize, usize, usize) {$/;"	P	implementation:FlatSamples
strides_cwh	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    pub fn strides_cwh(&self) -> (usize, usize, usize) {$/;"	P	implementation:SampleLayout
sub	/home/go/Documents/Rust/renderer/src/geometry/normal.rs	/^    fn sub(self, other: Normal3<T>) -> Normal3<T> {$/;"	P	implementation:Normal3
sub	/home/go/Documents/Rust/renderer/src/geometry/point.rs	/^    fn sub(self, other: Point3<T>) -> Vector3<T> {$/;"	P	implementation:Point3
sub	/home/go/Documents/Rust/renderer/src/geometry/point.rs	/^    fn sub(self, other: Vector3<T>) -> Point3<T> {$/;"	P	implementation:Point3
sub	/home/go/Documents/Rust/renderer/src/geometry/vector.rs	/^    fn sub(self, other: Vector3<T>) -> Vector3<T> {$/;"	P	implementation:Vector3
sub_assign	/home/go/Documents/Rust/renderer/src/geometry/normal.rs	/^    fn sub_assign(&mut self, other: Normal3<T>) {$/;"	P	implementation:Normal3
sub_assign	/home/go/Documents/Rust/renderer/src/geometry/point.rs	/^    fn sub_assign(&mut self, other: Vector3<T>) {$/;"	P	implementation:Point3
sub_assign	/home/go/Documents/Rust/renderer/src/geometry/vector.rs	/^    fn sub_assign(&mut self, other: Vector3<T>) {$/;"	P	implementation:Vector3
sub_image	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    fn sub_image($/;"	P	interface:GenericImage
sub_image	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    fn sub_image($/;"	f
subtype	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/decoder.rs	/^    pub fn subtype(&self) -> PNMSubtype {$/;"	P	implementation:PNMDecoder
subtype	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/header.rs	/^    pub fn subtype(&self) -> PNMSubtype {$/;"	P	implementation:PNMHeader
support	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/imageops/sample.rs	/^    pub support: f32,$/;"	m	struct:Filter
surface_area	/home/go/Documents/Rust/renderer/src/geometry/bounds.rs	/^    pub fn surface_area(&self) -> f64 {$/;"	f
tables	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/encoder.rs	/^    tables: Vec<u8>,$/;"	m	struct:JPEGEncoder
test	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^mod test {$/;"	n
test	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^mod test {$/;"	n
test	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dynimage.rs	/^mod test {$/;"	n
test	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/imageops/affine.rs	/^mod test {$/;"	n
test	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/imageops/colorops.rs	/^mod test {$/;"	n
test	/home/go/Documents/Rust/renderer/src/geometry/normal.rs	/^mod test {$/;"	n
test	/home/go/Documents/Rust/renderer/src/geometry/point.rs	/^mod test {$/;"	n
test	/home/go/Documents/Rust/renderer/src/geometry/vector.rs	/^mod test {$/;"	n
test	/home/go/Documents/Rust/renderer/src/lib.rs	/^    fn test() {$/;"	f	module:tests
test_add_assign	/home/go/Documents/Rust/renderer/src/geometry/normal.rs	/^    fn test_add_assign() {$/;"	f	module:test
test_add_assign	/home/go/Documents/Rust/renderer/src/geometry/point.rs	/^    fn test_add_assign() {$/;"	f	module:test
test_add_assign	/home/go/Documents/Rust/renderer/src/geometry/vector.rs	/^    fn test_add_assign() {$/;"	f	module:test
test_aligned_writes	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/autobreak.rs	/^    fn test_aligned_writes() {$/;"	f	module:tests
test_apply_with_alpha_bgr	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^    fn test_apply_with_alpha_bgr() {$/;"	f	module:tests
test_apply_with_alpha_bgra	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^    fn test_apply_with_alpha_bgra() {$/;"	f	module:tests
test_apply_with_alpha_rgb	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^    fn test_apply_with_alpha_rgb() {$/;"	f	module:tests
test_apply_with_alpha_rgba	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^    fn test_apply_with_alpha_rgba() {$/;"	f	module:tests
test_bitfield_len	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^    fn test_bitfield_len() {$/;"	f	module:test
test_blend_luma_alpha	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^    fn test_blend_luma_alpha() {$/;"	f	module:tests
test_blend_rgba	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^    fn test_blend_rgba() {$/;"	f	module:tests
test_can_nest_views	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    fn test_can_nest_views() {$/;"	f	module:tests
test_can_subimage_clone_nonmut	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    fn test_can_subimage_clone_nonmut() {$/;"	f	module:tests
test_dither	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/imageops/colorops.rs	/^    fn test_dither() {$/;"	f	module:test
test_empty_file	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dynimage.rs	/^    fn test_empty_file() {$/;"	f	module:test
test_flip_horizontal	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/imageops/affine.rs	/^    fn test_flip_horizontal() {$/;"	f	module:test
test_flip_vertical	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/imageops/affine.rs	/^    fn test_flip_vertical() {$/;"	f	module:test
test_get_pixel	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    fn test_get_pixel() {$/;"	f	module:test
test_greater_writes	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/autobreak.rs	/^    fn test_greater_writes() {$/;"	f	module:tests
test_image_alpha_blending	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    fn test_image_alpha_blending() {$/;"	f	module:tests
test_image_coordinate_overflow	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/imageops/mod.rs	/^    fn test_image_coordinate_overflow() {$/;"	f	module:tests
test_image_in_image	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/imageops/mod.rs	/^    fn test_image_in_image() {$/;"	f	module:tests
test_image_in_image_outside_of_bounds	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/imageops/mod.rs	/^    fn test_image_in_image_outside_of_bounds() {$/;"	f	module:tests
test_image_outside_image_no_wrap_around	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/imageops/mod.rs	/^    fn test_image_outside_image_no_wrap_around() {$/;"	f	module:tests
test_in_bounds	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    fn test_in_bounds() {$/;"	f	module:tests
test_issue_186	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/imageops/sample.rs	/^    fn test_issue_186() {$/;"	f	module:tests
test_load_rect	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    fn test_load_rect() {$/;"	f	module:tests
test_map_with_alpha_bgr	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^    fn test_map_with_alpha_bgr() {$/;"	f	module:tests
test_map_with_alpha_bgra	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^    fn test_map_with_alpha_bgra() {$/;"	f	module:tests
test_map_with_alpha_rgb	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^    fn test_map_with_alpha_rgb() {$/;"	f	module:tests
test_map_with_alpha_rgba	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^    fn test_map_with_alpha_rgba() {$/;"	f	module:tests
test_mut_iter	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    fn test_mut_iter() {$/;"	f	module:test
test_rotate180	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/imageops/affine.rs	/^    fn test_rotate180() {$/;"	f	module:test
test_rotate270	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/imageops/affine.rs	/^    fn test_rotate270() {$/;"	f	module:test
test_rotate90	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/imageops/affine.rs	/^    fn test_rotate90() {$/;"	f	module:test
tests	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/encoder.rs	/^mod tests {$/;"	n
tests	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/color.rs	/^mod tests {$/;"	n
tests	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^mod tests {$/;"	n
tests	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^mod tests {$/;"	n
tests	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/imageops/mod.rs	/^mod tests {$/;"	n
tests	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/imageops/sample.rs	/^mod tests {$/;"	n
tests	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/encoder.rs	/^mod tests {$/;"	n
tests	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/autobreak.rs	/^mod tests {$/;"	n
tests	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/decoder.rs	/^mod tests {$/;"	n
tests	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/encoder.rs	/^mod tests {$/;"	n
tests	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/mod.rs	/^mod tests {$/;"	n
tests	/home/go/Documents/Rust/renderer/src/lib.rs	/^mod tests {$/;"	n
tga	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/lib.rs	/^pub mod tga;$/;"	n
thumbnail	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dynimage.rs	/^    pub fn thumbnail(&self, nwidth: u32, nheight: u32) -> DynamicImage {$/;"	P	implementation:DynamicImage
thumbnail	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/imageops/sample.rs	/^pub fn thumbnail<I, P, S>(image: &I, new_width: u32, new_height: u32) -> ImageBuffer<P, Vec<S>>$/;"	f
thumbnail_exact	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dynimage.rs	/^    pub fn thumbnail_exact(&self, nwidth: u32, nheight: u32) -> DynamicImage {$/;"	P	implementation:DynamicImage
thumbnail_sample_block	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/imageops/sample.rs	/^fn thumbnail_sample_block<I, P, S>($/;"	f
thumbnail_sample_fraction_both	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/imageops/sample.rs	/^fn thumbnail_sample_fraction_both<I, P, S>($/;"	f
thumbnail_sample_fraction_horizontal	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/imageops/sample.rs	/^fn thumbnail_sample_fraction_horizontal<I, P, S>($/;"	f
thumbnail_sample_fraction_vertical	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/imageops/sample.rs	/^fn thumbnail_sample_fraction_vertical<I, P, S>($/;"	f
tiff	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/lib.rs	/^pub mod tiff;$/;"	n
to_bgr	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    fn to_bgr(&self) -> Bgr<Self::Subpixel>;$/;"	P	interface:Pixel
to_bgr	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dynimage.rs	/^    pub fn to_bgr(&self) -> BgrImage {$/;"	P	implementation:DynamicImage
to_bgra	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    fn to_bgra(&self) -> Bgra<Self::Subpixel>;$/;"	P	interface:Pixel
to_bgra	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dynimage.rs	/^    pub fn to_bgra(&self) -> BgraImage {$/;"	P	implementation:DynamicImage
to_hdr	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_decoder.rs	/^    pub fn to_hdr(self) -> Rgb<f32> {$/;"	P	implementation:RGBE8Pixel
to_image	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    pub fn to_image(&self) -> ImageBuffer<DerefPixel<I>, Vec<DerefSubpixel<I>>>$/;"	P	implementation:SubImage
to_ldr	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_decoder.rs	/^    pub fn to_ldr<T: Primitive + Zero>(self) -> Rgb<T> {$/;"	P	implementation:RGBE8Pixel
to_ldr_scale_gamma	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_decoder.rs	/^    pub fn to_ldr_scale_gamma<T: Primitive + Zero>(self, scale: f32, gamma: f32) -> Rgb<T> {$/;"	P	implementation:RGBE8Pixel
to_luma	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    fn to_luma(&self) -> Luma<Self::Subpixel>;$/;"	P	interface:Pixel
to_luma	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dynimage.rs	/^    pub fn to_luma(&self) -> GrayImage {$/;"	P	implementation:DynamicImage
to_luma_alpha	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    fn to_luma_alpha(&self) -> LumaA<Self::Subpixel>;$/;"	P	interface:Pixel
to_luma_alpha	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dynimage.rs	/^    pub fn to_luma_alpha(&self) -> GrayAlphaImage {$/;"	P	implementation:DynamicImage
to_rgb	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    fn to_rgb(&self) -> Rgb<Self::Subpixel>;$/;"	P	interface:Pixel
to_rgb	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dynimage.rs	/^    pub fn to_rgb(&self) -> RgbImage {$/;"	P	implementation:DynamicImage
to_rgba	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    fn to_rgba(&self) -> Rgba<Self::Subpixel>;$/;"	P	interface:Pixel
to_rgba	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dynimage.rs	/^    pub fn to_rgba(&self) -> RgbaImage {$/;"	P	implementation:DynamicImage
to_rgbe8	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_encoder.rs	/^pub fn to_rgbe8(pix: Rgb<f32>) -> RGBE8Pixel {$/;"	f
to_rgbe8_test	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_encoder.rs	/^fn to_rgbe8_test() {$/;"	f
to_vec	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    pub fn to_vec<T>(&self) -> FlatSamples<Vec<T>> $/;"	P	implementation:FlatSamples
token_probs	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^    token_probs: Box<TokenProbTables>,$/;"	m	struct:VP8Decoder
top	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/animation.rs	/^    pub fn top(&self) -> u32 {$/;"	P	implementation:Frame
top	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/animation.rs	/^    top: u32,$/;"	m	struct:Frame
top	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/gif.rs	/^    top: u32,$/;"	m	struct:GifFrameIterator
top	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^    top: Vec<MacroBlock>,$/;"	m	struct:VP8Decoder
top_border	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^    top_border: Vec<u8>,$/;"	m	struct:VP8Decoder
top_down	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^    top_down: bool,$/;"	m	struct:BMPDecoder
top_pixels	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^fn top_pixels(a: &[u8], x0: usize, y0: usize, stride: usize) -> (u8, u8, u8, u8, u8, u8, u8, u8)/;"	f
topleft_pixel	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^fn topleft_pixel(a: &[u8], x0: usize, y0: usize, stride: usize) -> u8 {$/;"	f
total	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    total: u64,$/;"	m	struct:Progress
total_bytes	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    fn total_bytes(&self) -> u64 {$/;"	P	interface:ImageDecoder
total_bytes	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    total_bytes: usize,$/;"	m	struct:ImageReadBuffer
tq	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/encoder.rs	/^    tq: u8,$/;"	m	struct:Component
tracer	/home/go/Documents/Rust/renderer/src/geometry/world.rs	/^    tracer: &Tracer,$/;"	m	struct:World
traits	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/lib.rs	/^mod traits;$/;"	n
transform	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/mod.rs	/^mod transform;$/;"	n
transform	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/mod.rs	/^mod transform;$/;"	n
triangle_kernel	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/imageops/sample.rs	/^pub fn triangle_kernel(x: f32) -> f32 {$/;"	f
trouble	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_decoder.rs	/^    trouble: bool,        \/\/ optimization, true indicates that we need to check something$/;"	m	struct:HDRImageDecoderIterator
try_encode_frames	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/gif.rs	/^    pub fn try_encode_frames<F>(&mut self, frames: F) -> ImageResult<()>$/;"	P	implementation:Encoder
try_into_buffer	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    pub fn try_into_buffer<P>(self) -> Result<ImageBuffer<P, Buffer>, (Error, Self)> $/;"	P	implementation:FlatSamples
try_upgrade	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    pub fn try_upgrade(self) -> Result<ViewMut<Buffer, P>, (Error, Self)> $/;"	f
tuple	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/decoder.rs	/^    tuple: TupleType,$/;"	m	struct:PNMDecoder
tuple_type	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/decoder.rs	/^    fn tuple_type(&self) -> ImageResult<TupleType> {$/;"	P	implementation:ArbitraryHeader
tuple_type	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/decoder.rs	/^    fn tuple_type(&self) -> ImageResult<TupleType> {$/;"	P	implementation:BitmapHeader
tuple_type	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/decoder.rs	/^    fn tuple_type(&self) -> ImageResult<TupleType> {$/;"	P	implementation:GraymapHeader
tuple_type	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/decoder.rs	/^    fn tuple_type(&self) -> ImageResult<TupleType> {$/;"	P	implementation:PixmapHeader
tuple_type	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/decoder.rs	/^    fn tuple_type(&self) -> ImageResult<TupleType>;$/;"	P	interface:DecodableImageHeader
tupltype	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/header.rs	/^    pub tupltype: Option<ArbitraryTuplType>,$/;"	m	struct:ArbitraryHeader
u16	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/traits.rs	/^impl Enlargeable for u16 {$/;"	c
u16	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/traits.rs	/^impl Primitive for u16 {}$/;"	c
u32	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/traits.rs	/^impl Enlargeable for u32 {$/;"	c
u32	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/traits.rs	/^impl Primitive for u32 {}$/;"	c
u64	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/traits.rs	/^impl Primitive for u64 {}$/;"	c
u8	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/traits.rs	/^impl Enlargeable for u8 {$/;"	c
u8	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/traits.rs	/^impl Primitive for u8 {}$/;"	c
unchecked	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/encoder.rs	/^    unchecked: UncheckedHeader<'a>,$/;"	m	struct:CheckedDimensions
unsafe_get_pixel	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    unsafe fn unsafe_get_pixel(&self, x: u32, y: u32) -> P {$/;"	f
unsafe_get_pixel	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    unsafe fn unsafe_get_pixel(&self, x: u32, y: u32) -> Self::Pixel {$/;"	P	interface:GenericImageView
unsafe_pixel_indices	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    unsafe fn unsafe_pixel_indices(&self, x: u32, y: u32) -> Range<usize> {$/;"	f
unsafe_put_pixel	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    unsafe fn unsafe_put_pixel(&mut self, x: u32, y: u32, pixel: P) {$/;"	f
unsafe_put_pixel	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    unsafe fn unsafe_put_pixel(&mut self, x: u32, y: u32, pixel: Self::Pixel) {$/;"	P	interface:GenericImage
unsharpen	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dynimage.rs	/^    pub fn unsharpen(&self, sigma: f32, threshold: i32) -> DynamicImage {$/;"	P	implementation:DynamicImage
unsharpen	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/imageops/sample.rs	/^pub fn unsharpen<I, P, S>(image: &I, sigma: f32, threshold: i32) -> ImageBuffer<P, Vec<S>>$/;"	f
update_header_info	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_decoder.rs	/^    fn update_header_info(&mut self, line: &str, strict: bool) -> ImageResult<()> {$/;"	P	implementation:HDRMetadata
update_token_probabilities	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^    fn update_token_probabilities(&mut self) {$/;"	P	implementation:VP8Decoder
usize	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/traits.rs	/^impl Primitive for usize {}$/;"	c
utils	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/lib.rs	/^mod utils;$/;"	n
utils	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/math/mod.rs	/^pub mod utils;$/;"	n
uvac	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^    uvac: i16,$/;"	m	struct:Segment
uvdc	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^    uvdc: i16,$/;"	m	struct:Segment
v	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/encoder.rs	/^    v: u8,$/;"	m	struct:Component
value	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^    value: u32,$/;"	m	struct:BoolReader
value_at	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/encoder.rs	/^fn value_at(s: &[u8], index: usize) -> u8 {$/;"	f
variant	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dxt.rs	/^    variant: DXTVariant,$/;"	m	struct:DXTDecoder
vec3f	/home/go/Documents/Rust/renderer/src/geometry/vector.rs	/^macro_rules! vec3f {$/;"	M
vec_u16_copy_u8	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/utils/mod.rs	/^pub fn vec_u16_copy_u8(vec: &Vec<u16>) -> Vec<u8> {$/;"	f
vec_u16_into_u8	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/utils/mod.rs	/^pub fn vec_u16_into_u8(vec: Vec<u16>) -> Vec<u8> {$/;"	f
vector	/home/go/Documents/Rust/renderer/src/geometry/mod.rs	/^pub mod vector;$/;"	n
version	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^    version: u8,$/;"	m	struct:Frame
vertical_sample	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/imageops/sample.rs	/^fn vertical_sample<I, P, S>($/;"	f
view	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    fn view(&self, x: u32, y: u32, width: u32, height: u32) -> SubImage<&Self::InnerImageView> {$/;"	P	interface:GenericImageView
view	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    fn view(&self, x: u32, y: u32, width: u32, height: u32) -> SubImage<&Self::InnerImageView> {$/;"	f
volume	/home/go/Documents/Rust/renderer/src/geometry/bounds.rs	/^    pub fn volume(&self) -> T {$/;"	f
vp	/home/go/Documents/Rust/renderer/src/geometry/world.rs	/^    vp: ViewPlane,$/;"	m	struct:World
vp8	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/mod.rs	/^pub mod vp8;$/;"	n
vres	/home/go/Documents/Rust/renderer/src/geometry/world.rs	/^    vres: i32,$/;"	m	struct:World::ViewPlane
w	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dxt.rs	/^    w: W,$/;"	m	struct:DXTEncoder
w	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/gif.rs	/^    w: Option<W>,$/;"	m	struct:Encoder
w	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_encoder.rs	/^    w: W,$/;"	m	struct:HDREncoder
w	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/ico/encoder.rs	/^    w: W,$/;"	m	struct:ICOEncoder
w	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/encoder.rs	/^    w: &'a mut W,$/;"	m	struct:BitWriter
w	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/png.rs	/^    w: W,$/;"	m	struct:PNGEncoder
webp	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/lib.rs	/^pub mod webp;$/;"	n
width	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^    width: i32,$/;"	m	struct:BMPDecoder
width	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    pub fn width(&self) -> u32 {$/;"	f
width	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    width: u32,$/;"	m	struct:EnumeratePixels
width	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    width: u32,$/;"	m	struct:EnumeratePixelsMut
width	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    width: u32,$/;"	m	struct:ImageBuffer
width	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    pub width: u32,$/;"	m	struct:SampleLayout
width	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/gif.rs	/^    width: u32,$/;"	m	struct:GifFrameIterator
width	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_decoder.rs	/^    pub width: u32,$/;"	m	struct:HDRMetadata
width	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_decoder.rs	/^    width: u32,$/;"	m	struct:HDRDecoder
width	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/ico/decoder.rs	/^    width: u8,$/;"	m	struct:DirEntry
width	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    fn width(&self) -> u32 {$/;"	P	interface:GenericImageView
width	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    width: u32,$/;"	m	struct:MutPixels
width	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    width: u32,$/;"	m	struct:Pixels
width	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/encoder.rs	/^    width: u32,$/;"	m	struct:CheckedDimensions
width	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/header.rs	/^    pub fn width(&self) -> u32 {$/;"	P	implementation:PNMHeader
width	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/header.rs	/^    pub width: u32,$/;"	m	struct:ArbitraryHeader
width	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/header.rs	/^    pub width: u32,$/;"	m	struct:BitmapHeader
width	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/header.rs	/^    pub width: u32,$/;"	m	struct:GraymapHeader
width	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/header.rs	/^    pub width: u32,$/;"	m	struct:PixmapHeader
width	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/tga/decoder.rs	/^    width: usize,$/;"	m	struct:TGADecoder
width	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^    pub width: u16,$/;"	m	struct:Frame
width_blocks	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dxt.rs	/^    width_blocks: u32,$/;"	m	struct:DXTDecoder
width_stride	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/flat.rs	/^    pub width_stride: usize,$/;"	m	struct:SampleLayout
with_dynamic_header	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/encoder.rs	/^    pub fn with_dynamic_header(self) -> Self {$/;"	P	implementation:PNMEncoder
with_header	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/encoder.rs	/^    pub fn with_header(self, header: PNMHeader) -> Self {$/;"	P	implementation:PNMEncoder
with_rows	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/decoder.rs	/^fn with_rows<F>($/;"	f
with_strictness	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_decoder.rs	/^    pub fn with_strictness(mut reader: R, strict: bool) -> ImageResult<HDRDecoder<R>> {$/;"	P	implementation:HDRDecoder
with_subtype	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/encoder.rs	/^    pub fn with_subtype(self, subtype: PNMSubtype) -> Self {$/;"	P	implementation:PNMEncoder
wrapped	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/autobreak.rs	/^    wrapped: W,$/;"	m	struct:AutoBreak
write	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/autobreak.rs	/^    fn write(&mut self, buffer: &[u8]) -> io::Result<usize> {$/;"	P	implementation:AutoBreak
write	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/header.rs	/^    pub fn write(&self, writer: &mut io::Write) -> io::Result<()> {$/;"	P	implementation:PNMHeader
write_bits	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/encoder.rs	/^    fn write_bits(&mut self, bits: u16, size: u8) -> io::Result<()> {$/;"	P	implementation:BitWriter
write_block	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/encoder.rs	/^    fn write_block($/;"	P	implementation:BitWriter
write_direntry	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/ico/encoder.rs	/^fn write_direntry<W: Write>($/;"	f
write_dynamic_header	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/encoder.rs	/^    fn write_dynamic_header($/;"	P	implementation:PNMEncoder
write_header	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/encoder.rs	/^    fn write_header(self, writer: &mut Write) -> io::Result<TupleEncoding<'a>> {$/;"	P	implementation:CheckedHeader
write_icondir	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/ico/encoder.rs	/^fn write_icondir<W: Write>(w: &mut W, num_images: u16) -> io::Result<()> {$/;"	f
write_image	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/encoder.rs	/^    fn write_image(&self, writer: &mut Write) -> io::Result<()> {$/;"	P	implementation:TupleEncoding
write_pbm_bits	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/encoder.rs	/^    fn write_pbm_bits<V>(self, samples: &[V], width: u32) -> io::Result<()>$/;"	P	implementation:SampleWriter
write_rgbe8	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/hdr/hdr_encoder.rs	/^fn write_rgbe8<W: Write>(w: &mut W, v: RGBE8Pixel) -> Result<()> {$/;"	f
write_row_pad	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/encoder.rs	/^    fn write_row_pad(&mut self, row_pad_size: u32) -> io::Result<()> {$/;"	P	implementation:BMPEncoder
write_samples_ascii	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/encoder.rs	/^    fn write_samples_ascii<V>(self, samples: V) -> io::Result<()>$/;"	P	implementation:SampleWriter
write_segment	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/encoder.rs	/^    fn write_segment(&mut self, marker: u8, data: Option<&[u8]>) -> io::Result<()> {$/;"	P	implementation:BitWriter
write_subtyped_header	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/encoder.rs	/^    fn write_subtyped_header($/;"	P	implementation:PNMEncoder
write_to	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/dynimage.rs	/^    pub fn write_to<W: Write, F: Into<ImageOutputFormat>>($/;"	P	implementation:DynamicImage
write_width_or_height	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/ico/encoder.rs	/^fn write_width_or_height<W: Write>(w: &mut W, value: u32) -> io::Result<()> {$/;"	f
write_with_header	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/encoder.rs	/^    fn write_with_header($/;"	P	implementation:PNMEncoder
writer	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/bmp/encoder.rs	/^    writer: &'a mut W,$/;"	m	struct:BMPEncoder
writer	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/jpeg/encoder.rs	/^    writer: BitWriter<'a, W>,$/;"	m	struct:JPEGEncoder
writer	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/pnm/encoder.rs	/^    writer: W,$/;"	m	struct:PNMEncoder
x	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    x: u32,$/;"	m	struct:EnumeratePixels
x	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    x: u32,$/;"	m	struct:EnumeratePixelsMut
x	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    x: u32,$/;"	m	struct:MutPixels
x	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    x: u32,$/;"	m	struct:Pixels
x	/home/go/Documents/Rust/renderer/src/geometry/normal.rs	/^    pub x: T,$/;"	m	struct:Normal3
x	/home/go/Documents/Rust/renderer/src/geometry/point.rs	/^    pub x: T,$/;"	m	struct:Point3
x	/home/go/Documents/Rust/renderer/src/geometry/vector.rs	/^    pub x: T,$/;"	m	struct:Vector3
x_origin	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/tga/decoder.rs	/^    x_origin: u16,      \/\/ x-origin of image$/;"	m	struct:Header
xoffset	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    xoffset: u32,$/;"	m	struct:SubImage
xstride	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    xstride: u32,$/;"	m	struct:SubImage
y	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    y: u32,$/;"	m	struct:EnumeratePixels
y	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/buffer.rs	/^    y: u32,$/;"	m	struct:EnumeratePixelsMut
y	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    y: u32,$/;"	m	struct:MutPixels
y	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    y: u32,$/;"	m	struct:Pixels
y	/home/go/Documents/Rust/renderer/src/geometry/normal.rs	/^    pub y: T,$/;"	m	struct:Normal3
y	/home/go/Documents/Rust/renderer/src/geometry/point.rs	/^    pub y: T,$/;"	m	struct:Point3
y	/home/go/Documents/Rust/renderer/src/geometry/vector.rs	/^    pub y: T,$/;"	m	struct:Vector3
y2ac	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^    y2ac: i16,$/;"	m	struct:Segment
y2dc	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^    y2dc: i16,$/;"	m	struct:Segment
y_origin	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/tga/decoder.rs	/^    y_origin: u16,      \/\/ y-origin of image$/;"	m	struct:Header
yac	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^    yac: i16,$/;"	m	struct:Segment
ybuf	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^    pub ybuf: Vec<u8>,$/;"	m	struct:Frame
ydc	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/webp/vp8.rs	/^    ydc: i16,$/;"	m	struct:Segment
yoffset	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    yoffset: u32,$/;"	m	struct:SubImage
ystride	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/image.rs	/^    ystride: u32,$/;"	m	struct:SubImage
z	/home/go/Documents/Rust/renderer/src/geometry/normal.rs	/^    pub z: T,$/;"	m	struct:Normal3
z	/home/go/Documents/Rust/renderer/src/geometry/point.rs	/^    pub z: T,$/;"	m	struct:Point3
z	/home/go/Documents/Rust/renderer/src/geometry/vector.rs	/^    pub z: T,$/;"	m	struct:Vector3
zeroed	/home/go/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.21.1/./src/imageops/sample.rs	/^    fn zeroed() -> Self {$/;"	P	implementation:ThumbnailSum
